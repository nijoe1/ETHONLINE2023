{
  "address": "0xaB312E5040aDdE20A1623f1CB36682268bbeC300",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedOrigin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "FeePaymentFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "data",
          "type": "bytes4"
        }
      ],
      "name": "InvalidRelayMethod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPaymasterOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RelayExecutionFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "origin",
          "type": "address"
        }
      ],
      "name": "UntrustedOrigin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadataHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Metadata",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISafeProtocolManager",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ISafe",
          "name": "safe",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SafeProtocolAction[]",
              "name": "actions",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SafeTransaction",
          "name": "safetx",
          "type": "tuple"
        }
      ],
      "name": "executeFromPlugin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataProvider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "providerType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "location",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiresRootAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "method",
          "type": "bytes4"
        }
      ],
      "name": "setAllowedInteractions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedOrigin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf29073360c0d521a5b57cc5a80b05ca6322871df3bf83641d22d84ec7a5c5958",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x044B595C9b94A17Adc489bD29696af40ccb3E4d2",
    "contractAddress": null,
    "transactionIndex": 27,
    "gasUsed": "2051308",
    "logsBloom": "0x
    "blockHash": "0x9e88dd22376c0481815b1e2fc7942ea9ef1620547ddb577c29bba4b2f3e6701f",
    "transactionHash": "0xf29073360c0d521a5b57cc5a80b05ca6322871df3bf83641d22d84ec7a5c5958",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 9865168,
        "transactionHash": "0xf29073360c0d521a5b57cc5a80b05ca6322871df3bf83641d22d84ec7a5c5958",
        "address": "0xaB312E5040aDdE20A1623f1CB36682268bbeC300",
        "topics": [
          "0x522c683f99251eea7f3b027592e92a5398e7582983be1f7c0f33715ce025740f",
          "0x4dc1bd8597d8045499be6fdd454bee7ff8ec2f85293de2bab8ed70c75e03b99f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c2000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000b5465737420506c7567696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a68747470733a2f2f6e696a6f65312e6769746875622e696f2f536166652e5061796d61737465722f232f72656c61792f307861623331326535303430616464653230613136323366316362333636383232363862626563333030000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 44,
        "blockHash": "0x9e88dd22376c0481815b1e2fc7942ea9ef1620547ddb577c29bba4b2f3e6701f"
      }
    ],
    "blockNumber": 9865168,
    "cumulativeGasUsed": "12455741",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 5,
  "solcInputHash": "77a0386a1930d9b709cd3949fda8f45f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedOrigin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FeePaymentFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"data\",\"type\":\"bytes4\"}],\"name\":\"InvalidRelayMethod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPaymasterOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RelayExecutionFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"UntrustedOrigin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Metadata\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ISafeProtocolManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SafeProtocolAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct SafeTransaction\",\"name\":\"safetx\",\"type\":\"tuple\"}],\"name\":\"executeFromPlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"providerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiresRootAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"}],\"name\":\"setAllowedInteractions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"metadataProvider()\":{\"returns\":{\"location\":\"bytes\",\"providerType\":\"uint256 Type of metadata provider\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metadataProvider()\":{\"notice\":\"A function that returns information about the type of metadata provider and its location.         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\"},\"name()\":{\"notice\":\"A funtion that returns name of the plugin\"},\"requiresRootAccess()\":{\"notice\":\"A function that indicates if the plugin requires root access to a Safe.\"},\"version()\":{\"notice\":\"A function that returns version of the plugin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafePaymasterPlugin.sol\":\"SafePaymasterPlugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\\nuint256 constant _FEE_START = 32; // offset: uint256\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\\n * Expects calldata encoding:\\n * abi.encodePacked( _data,\\n *                   _feeCollector,\\n *                   _feeToken,\\n *                   _fee);\\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\\n * 32bytes start offsets from calldatasize:\\n *     feeCollector: - 72 bytes\\n *     feeToken: - 52 bytes\\n *     fee: - 32 bytes\\n */\\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\\nabstract contract GelatoRelayContext is GelatoRelayBase {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContext._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    function _getMsgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContext();\\n    }\\n}\\n\",\"keccak256\":\"0xe47ba262f741e76c836d32c8f60cccc4334aa41c800204155f69d542442279ed\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GELATO_RELAY} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    modifier onlyGelatoRelay() {\\n        require(_isGelatoRelay(msg.sender), \\\"onlyGelatoRelay\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal pure returns (bool) {\\n        return _forwarder == GELATO_RELAY;\\n    }\\n}\\n\",\"keccak256\":\"0x8b8ca04a1b6dce1b14b0b5f59783defe5562f876f0d6127aefa3e251b7631ba1\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0xBf175FCC7086b4f9bd59d5EAE8eA67b8f940DE0d;\\n\",\"keccak256\":\"0xa3f9966896db1bfafbcb1b58d1d76b44d1cd1660986e675d57398d5a9a74d242\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0x4507d23bf0b68cb763aec3e483d677fe59cd963de90f3a27958ceb960e0157df\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nstruct SafeProtocolAction {\\n    address payable to;\\n    uint256 value;\\n    bytes data;\\n}\\n\\nstruct SafeTransaction {\\n    SafeProtocolAction[] actions;\\n    uint256 nonce;\\n    bytes32 metadataHash;\\n}\\n\\nstruct SafeRootAccess {\\n    SafeProtocolAction action;\\n    uint256 nonce;\\n    bytes32 metadataHash;\\n}\\n\",\"keccak256\":\"0xfcce6a99ceb499693f9a33aa624affcefcbb9af1fb328f4b2bc4b9f245bb48ba\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe{Core} Protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0xa3dd0d1c1c701479d294e384c4350e3829e69045a2c740a62da353eac45ef258\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeTransaction, SafeRootAccess} from \\\"../DataTypes.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ISafeProtocolFunctionHandler - An interface that a Safe function handler should implement to handle static calls.\\n * @notice In Safe{Core} Protocol, a function handler can be used to add additional functionality to a Safe.\\n *         User(s) should add SafeProtocolManager as a function handler (aka fallback handler in Safe v1.x) to the Safe\\n *         and enable the contract implementing ISafeProtocolFunctionHandler interface as a function handler in the\\n *         SafeProtocolManager for the specific function identifier.\\n */\\ninterface ISafeProtocolFunctionHandler is IERC165 {\\n    /**\\n     * @notice Handles calls to the Safe contract forwarded by the fallback function.\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n}\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\\n * @notice In Safe{Core} Protocol, a function handler can be used to add additional functionality to a Safe.\\n *         User(s) should add SafeProtocolManager as a function handler (aka fallback handler in Safe v1.x) to the Safe\\n *         and enable the contract implementing ISafeProtocolStaticFunctionHandler interface as a function handler in the\\n *         SafeProtocolManager for the specific function identifier.\\n */\\ninterface ISafeProtocolStaticFunctionHandler is IERC165 {\\n    /**\\n     * @notice Handles static calls to the Safe contract forwarded by the fallback function.\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n}\\n\\n/**\\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\\n * @notice In Safe{Core} Protocol, hooks can approve or deny transactions based on the logic it implements.\\n */\\ninterface ISafeProtocolHooks is IERC165 {\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\\n}\\n\\n/**\\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\\n */\\ninterface ISafeProtocolPlugin is IERC165 {\\n    /**\\n     * @notice A funtion that returns name of the plugin\\n     * @return name string name of the plugin\\n     */\\n    function name() external view returns (string memory name);\\n\\n    /**\\n     * @notice A function that returns version of the plugin\\n     * @return version string version of the plugin\\n     */\\n    function version() external view returns (string memory version);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n\\n    /**\\n     * @notice A function that indicates if the plugin requires root access to a Safe.\\n     * @return requiresRootAccess True if root access is required, false otherwise.\\n     */\\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\\n}\\n\",\"keccak256\":\"0x31362db1a2641c47d3456c02b31dba8f8b860082ea8d984fae5737d77199a6a7\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Manager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeRootAccess, SafeTransaction} from \\\"../DataTypes.sol\\\";\\n\\n/**\\n * @title ISafeProtocolManager interface a Manager should implement\\n * @notice A mediator checks the status of the integration through the registry and allows only\\n *         listed and non-flagged integrations to execute transactions. A Safe account should\\n *         add a mediator as a plugin.\\n */\\ninterface ISafeProtocolManager {\\n    /**\\n     * @notice This function allows enabled plugins to execute non-delegate call transactions thorugh a Safe.\\n     *         It should validate the status of the plugin through the registry and allows only listed and non-flagged integrations to execute transactions.\\n     * @param safe Address of a Safe account\\n     * @param transaction SafeTransaction instance containing payload information about the transaction\\n     * @return data Array of bytes types returned upon the successful execution of all the actions. The size of the array will be the same as the size of the actions\\n     *         in case of succcessful execution. Empty if the call failed.\\n     */\\n    function executeTransaction(ISafe safe, SafeTransaction calldata transaction) external returns (bytes[] memory data);\\n\\n    /**\\n     * @notice This function allows enabled plugins to execute delegate call transactions thorugh a Safe.\\n     *         It should validate the status of the plugin through the registry and allows only listed and non-flagged integrations to execute transactions.\\n     * @param safe Address of a Safe account\\n     * @param rootAccess SafeTransaction instance containing payload information about the transaction\\n     * @return data Arbitrary length bytes data returned upon the successful execution. The size of the array will be the same as the size of the actions\\n     *         in case of succcessful execution. Empty if the call failed.\\n     */\\n    function executeRootAccess(ISafe safe, SafeRootAccess calldata rootAccess) external returns (bytes memory data);\\n}\\n\",\"keccak256\":\"0x50c41530ee7788b90e2a12b1669642cb6dd316cde100cfe4ee2eebddd3db7ef6\",\"license\":\"LGPL-3.0-only\"},\"contracts/Base.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nimport {ISafeProtocolPlugin} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nenum MetadataProviderType {\\n    IPFS,\\n    URL,\\n    Contract,\\n    Event\\n}\\n\\ninterface IMetadataProvider {\\n    function retrieveMetadata(bytes32 metadataHash) external view returns (bytes memory metadata);\\n}\\n\\nstruct PluginMetadata {\\n    string name;\\n    string version;\\n    bool requiresRootAccess;\\n    string iconUrl;\\n    string appUrl;\\n}\\n\\nlibrary PluginMetadataOps {\\n    function encode(PluginMetadata memory data) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                uint8(0x00), // Format\\n                uint8(0x00), // Format version\\n                abi.encode(data.name, data.version, data.requiresRootAccess, data.iconUrl, data.appUrl) // Plugin Metadata\\n            );\\n    }\\n\\n    function decode(bytes calldata data) internal pure returns (PluginMetadata memory) {\\n        require(bytes16(data[0:2]) == bytes16(0x0000), \\\"Unsupported format or format version\\\");\\n        (string memory name, string memory version, bool requiresRootAccess, string memory iconUrl, string memory appUrl) = abi.decode(\\n            data[2:],\\n            (string, string, bool, string, string)\\n        );\\n        return PluginMetadata(name, version, requiresRootAccess, iconUrl, appUrl);\\n    }\\n}\\n\\nabstract contract BasePlugin is ISafeProtocolPlugin {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    string public name;\\n    string public version;\\n    bool public immutable requiresRootAccess;\\n    bytes32 public immutable metadataHash;\\n\\n    constructor(PluginMetadata memory metadata) {\\n        name = metadata.name;\\n        version = metadata.version;\\n        requiresRootAccess = metadata.requiresRootAccess;\\n        metadataHash = keccak256(metadata.encode());\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return interfaceId == type(ISafeProtocolPlugin).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\nabstract contract BasePluginWithStoredMetadata is BasePlugin, IMetadataProvider {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    bytes private encodedMetadata;\\n\\n    constructor(PluginMetadata memory metadata) BasePlugin(metadata) {\\n        encodedMetadata = metadata.encode();\\n    }\\n\\n    function retrieveMetadata(bytes32 _metadataHash) external view override returns (bytes memory metadata) {\\n        require(metadataHash == _metadataHash, \\\"Cannot retrieve metadata\\\");\\n        return encodedMetadata;\\n    }\\n\\n    function metadataProvider() public view override returns (uint256 providerType, bytes memory location) {\\n        providerType = uint256(MetadataProviderType.Contract);\\n        location = abi.encode(address(this));\\n    }\\n}\\n\\nabstract contract BasePluginWithEventMetadata is BasePlugin {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    event Metadata(bytes32 indexed metadataHash, bytes data);\\n\\n    constructor(PluginMetadata memory metadata) BasePlugin(metadata) {\\n        emit Metadata(metadataHash, metadata.encode());\\n    }\\n\\n    function metadataProvider() public view override returns (uint256 providerType, bytes memory location) {\\n        providerType = uint256(MetadataProviderType.Event);\\n        location = abi.encode(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xe9f79915c4cad92408f25dbbd832e19d1eee02f01c4ea847b018f30aa5e927ae\",\"license\":\"LGPL-3.0-only\"},\"contracts/SafePaymasterPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nimport {BasePluginWithEventMetadata, PluginMetadata} from \\\"./Base.sol\\\";\\nimport {ISafe} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\\\";\\nimport {ISafeProtocolManager} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Manager.sol\\\";\\nimport {SafeTransaction, SafeProtocolAction} from \\\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\\\";\\nimport {_getFeeCollectorRelayContext, _getFeeTokenRelayContext, _getFeeRelayContext} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\ninterface SafeOwners {\\n    function isOwner(address owner) external view returns (bool);\\n}\\n\\ncontract SafePaymasterPlugin is BasePluginWithEventMetadata {\\n\\n    error FeePaymentFailure(bytes data);\\n    error UntrustedOrigin(address origin);\\n    error RelayExecutionFailure(bytes data);\\n    error InvalidRelayMethod(bytes4 data);\\n    error NotPaymasterOwner();\\n\\n    address public immutable trustedOrigin;\\n\\n    struct SafeGuard{\\n        // ContractAddress => method => allowedMethod\\n        mapping(address => mapping(bytes4 => bool)) allowedCalls;\\n        // ContractAddress => method => allowedCallsByUser\\n        mapping(address => mapping(bytes4 => uint256)) userAllowancePerMethod;\\n    }\\n\\n    mapping(address => SafeGuard) safeGuard;\\n\\n    constructor(\\n        address _trustedOrigin\\n    )\\n        BasePluginWithEventMetadata(\\n            PluginMetadata({\\n                name: \\\"Test Plugin\\\",\\n                version: \\\"1.0.0\\\",\\n                requiresRootAccess: false,\\n                iconUrl: \\\"\\\",\\n                appUrl: string.concat(\\\"https://nijoe1.github.io/Safe.Paymaster/#/relay/\\\",Strings.toHexString(address(this)))\\n            })\\n        )\\n    {\\n        trustedOrigin = _trustedOrigin;\\n    }\\n\\n    function setAllowedInteractions(\\n        address safeAddress,\\n        address contractAddress,\\n        bytes4 method    \\n    )external{\\n        if(!SafeOwners(safeAddress).isOwner(msg.sender)) revert NotPaymasterOwner();\\n        safeGuard[safeAddress].allowedCalls[contractAddress][method] = true;\\n    }\\n\\n    // function setMaxFeePerToken(SafeOwners safe, address token, uint256 maxFee) external {\\n    //     require(safe.isOwner(msg.sender));\\n    //     maxFeePerToken[address(safe)][token] = maxFee;\\n    //     emit MaxFeeUpdated(address(safe), token, maxFee);\\n    // }\\n\\n    function payFee(ISafeProtocolManager manager, ISafe safe, uint256 nonce) internal {\\n        address feeCollector = _getFeeCollectorRelayContext();\\n        address feeToken = _getFeeTokenRelayContext();\\n        uint256 fee = _getFeeRelayContext();\\n        SafeProtocolAction[] memory actions = new SafeProtocolAction[](1);\\n        // uint256 maxFee = maxFeePerToken[address(safe)][feeToken];\\n        // if (fee > maxFee) revert FeeTooHigh(feeToken, fee);\\n        if (feeToken == NATIVE_TOKEN || feeToken == address(0)) {\\n            // If the native token is used for fee payment, then we directly send the fees to the fee collector\\n            actions[0].to = payable(feeCollector);\\n            actions[0].value = fee;\\n            actions[0].data = \\\"\\\";\\n        } else {\\n            // If a ERC20 token is used for fee payment, then we trigger a token transfer on the token for the fee to the fee collector\\n            actions[0].to = payable(feeToken);\\n            actions[0].value = 0;\\n            actions[0].data = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", feeCollector, fee);\\n        }\\n        // Note: Metadata format has not been proposed\\n        SafeTransaction memory safeTx = SafeTransaction({actions: actions, nonce: nonce, metadataHash: bytes32(0)});\\n        try manager.executeTransaction(safe, safeTx) returns (bytes[] memory) {} catch (bytes memory reason) {\\n            revert FeePaymentFailure(reason);\\n        }\\n    }\\n\\n    function relayCall(\\n        ISafeProtocolManager manager,\\n        ISafe safe, \\n        SafeTransaction calldata safetx\\n    ) internal {\\n\\n        // uint size = safetx.actions.length;\\n\\n        // for(uint i = 0; i < size; i++){\\n        //     bytes4 relayData = bytes4(safetx.actions[0].data[:4]);\\n        //     if(safeGuard[address(safe)].allowedCalls[safetx.actions[0].to][relayData])revert InvalidRelayMethod(relayData);\\n        // }\\n\\n        // Perform relay call and require success to avoid that user paid for failed transaction\\n        try manager.executeTransaction(safe, safetx) returns (bytes[] memory) {} catch (bytes memory reason) {\\n            revert RelayExecutionFailure(reason);\\n        }\\n    }\\n\\n    function executeFromPlugin(\\n        ISafeProtocolManager manager, \\n        ISafe safe,\\n        SafeTransaction calldata safetx\\n    ) external {\\n        if (trustedOrigin != address(0) && msg.sender != trustedOrigin) revert UntrustedOrigin(msg.sender);\\n\\n        relayCall(manager, safe, safetx);\\n        // We use the hash of the tx to relay has a nonce as this is unique\\n        uint256 nonce = uint256(keccak256(abi.encode(this, manager, safe, safetx.actions[0].data)));\\n        payFee(manager, safe, nonce);\\n    }\\n}\\n\",\"keccak256\":\"0x20c0ede65fed38ab61b532ba0d86a2d0fa37fda662bb614e06a8c435397a73d0\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002ff238038062002ff2833981810160405281019062000037919062000566565b6040518060a001604052806040518060400160405280600b81526020017f5465737420506c7567696e00000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f312e302e300000000000000000000000000000000000000000000000000000008152508152602001600015158152602001604051806020016040528060008152508152602001620000ec30620001ff60201b620007681760201c565b604051602001620000fe919062000687565b604051602081830303815290604052815250808060000151600090816200012691906200091c565b508060200151600190816200013c91906200091c565b508060400151151560808115158152505062000163816200023460201b620007951760201c565b8051906020012060a081815250505060a0517f522c683f99251eea7f3b027592e92a5398e7582983be1f7c0f33715ce025740f620001ac836200023460201b620007951760201c565b604051620001bb919062000a71565b60405180910390a2508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250505062000dcb565b60606200022d8273ffffffffffffffffffffffffffffffffffffffff16601460ff16620002a160201b60201c565b9050919050565b6060600080836000015184602001518560400151866060015187608001516040516020016200026895949392919062000b04565b6040516020818303038152906040526040516020016200028b9392919062000c08565b6040516020818303038152906040529050919050565b606060006002836002620002b6919062000c76565b620002c2919062000cc1565b67ffffffffffffffff811115620002de57620002dd620006ad565b5b6040519080825280601f01601f191660200182016040528015620003115781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106200034c576200034b62000cfc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110620003b357620003b262000cfc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002620003f5919062000c76565b62000401919062000cc1565b90505b6001811115620004ab577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811062000447576200044662000cfc565b5b1a60f81b82828151811062000461576200046062000cfc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080620004a39062000d2b565b905062000404565b5060008414620004f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004e99062000da9565b60405180910390fd5b8091505092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200052e8262000501565b9050919050565b620005408162000521565b81146200054c57600080fd5b50565b600081519050620005608162000535565b92915050565b6000602082840312156200057f576200057e620004fc565b5b60006200058f848285016200054f565b91505092915050565b600081905092915050565b7f68747470733a2f2f6e696a6f65312e6769746875622e696f2f536166652e506160008201527f796d61737465722f232f72656c61792f00000000000000000000000000000000602082015250565b60006200060160308362000598565b91506200060e82620005a3565b603082019050919050565b600081519050919050565b60005b838110156200064457808201518184015260208101905062000627565b60008484015250505050565b60006200065d8262000619565b62000669818562000598565b93506200067b81856020860162000624565b80840191505092915050565b60006200069482620005f2565b9150620006a2828462000650565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200072457607f821691505b6020821081036200073a5762000739620006dc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000765565b620007b0868362000765565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620007fd620007f7620007f184620007c8565b620007d2565b620007c8565b9050919050565b6000819050919050565b6200081983620007dc565b62000831620008288262000804565b84845462000772565b825550505050565b600090565b6200084862000839565b620008558184846200080e565b505050565b5b818110156200087d57620008716000826200083e565b6001810190506200085b565b5050565b601f821115620008cc57620008968162000740565b620008a18462000755565b81016020851015620008b1578190505b620008c9620008c08562000755565b8301826200085a565b50505b505050565b600082821c905092915050565b6000620008f160001984600802620008d1565b1980831691505092915050565b60006200090c8383620008de565b9150826002028217905092915050565b620009278262000619565b67ffffffffffffffff811115620009435762000942620006ad565b5b6200094f82546200070b565b6200095c82828562000881565b600060209050601f8311600181146200099457600084156200097f578287015190505b6200098b8582620008fe565b865550620009fb565b601f198416620009a48662000740565b60005b82811015620009ce57848901518255600182019150602085019450602081019050620009a7565b86831015620009ee5784890151620009ea601f891682620008de565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b600062000a3d8262000a03565b62000a49818562000a0e565b935062000a5b81856020860162000624565b62000a668162000a1f565b840191505092915050565b6000602082019050818103600083015262000a8d818462000a30565b905092915050565b600082825260208201905092915050565b600062000ab38262000619565b62000abf818562000a95565b935062000ad181856020860162000624565b62000adc8162000a1f565b840191505092915050565b60008115159050919050565b62000afe8162000ae7565b82525050565b600060a082019050818103600083015262000b20818862000aa6565b9050818103602083015262000b36818762000aa6565b905062000b47604083018662000af3565b818103606083015262000b5b818562000aa6565b9050818103608083015262000b71818462000aa6565b90509695505050505050565b600060ff82169050919050565b60008160f81b9050919050565b600062000ba48262000b8a565b9050919050565b62000bc062000bba8262000b7d565b62000b97565b82525050565b600081905092915050565b600062000bde8262000a03565b62000bea818562000bc6565b935062000bfc81856020860162000624565b80840191505092915050565b600062000c16828662000bab565b60018201915062000c28828562000bab565b60018201915062000c3a828462000bd1565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000c8382620007c8565b915062000c9083620007c8565b925082820262000ca081620007c8565b9150828204841483151762000cba5762000cb962000c47565b5b5092915050565b600062000cce82620007c8565b915062000cdb83620007c8565b925082820190508082111562000cf65762000cf562000c47565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062000d3882620007c8565b91506000820362000d4e5762000d4d62000c47565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600062000d9160208362000a95565b915062000d9e8262000d59565b602082019050919050565b6000602082019050818103600083015262000dc48162000d82565b9050919050565b60805160a05160c0516121e962000e09600039600081816102a1015281816102e1015261052301526000610707015260006106e301526121e96000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806366f5c27d1161006657806366f5c27d146101205780639b483f8a1461013e578063be193d271461015a578063c5a1d7f014610178578063d3d72d2a1461019657610093565b806301ffc9a7146100985780630227bad3146100c857806306fdde03146100e457806354fd4d5014610102575b600080fd5b6100b260048036038101906100ad9190610ff1565b6101b5565b6040516100bf9190611039565b60405180910390f35b6100e260048036038101906100dd9190611126565b610287565b005b6100ec610405565b6040516100f99190611225565b60405180910390f35b61010a610493565b6040516101179190611225565b60405180910390f35b610128610521565b6040516101359190611256565b60405180910390f35b6101586004803603810190610153919061129d565b610545565b005b6101626106e1565b60405161016f9190611039565b60405180910390f35b610180610705565b60405161018d9190611309565b60405180910390f35b61019e610729565b6040516101ac929190611392565b60405180910390f35b60007f3fce835e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061028057507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161415801561033057507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561037257336040517f895e14d40000000000000000000000000000000000000000000000000000000081526004016103699190611256565b60405180910390fd5b61037d8383836107fe565b600030848484806000019061039291906113d1565b60008181106103a4576103a3611434565b5b90506020028101906103b69190611463565b80604001906103c5919061148b565b6040516020016103d99594939291906115cb565b6040516020818303038152906040528051906020012060001c90506103ff8484836108f3565b50505050565b6000805461041290611648565b80601f016020809104026020016040519081016040528092919081815260200182805461043e90611648565b801561048b5780601f106104605761010080835404028352916020019161048b565b820191906000526020600020905b81548152906001019060200180831161046e57829003601f168201915b505050505081565b600180546104a090611648565b80601f01602080910402602001604051908101604052809291908181526020018280546104cc90611648565b80156105195780601f106104ee57610100808354040283529160200191610519565b820191906000526020600020905b8154815290600101906020018083116104fc57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b8273ffffffffffffffffffffffffffffffffffffffff16632f54bf6e336040518263ffffffff1660e01b815260040161057e9190611256565b602060405180830381865afa15801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf91906116a5565b6105f5576040517f77a796bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060606003808111156107405761073f6116d2565b5b9150306040516020016107539190611256565b60405160208183030381529060405290509091565b606061078e8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610ce8565b9050919050565b6060600080836000015184602001518560400151866060015187608001516040516020016107c7959493929190611701565b6040516020818303038152906040526040516020016107e8939291906117ef565b6040516020818303038152906040529050919050565b8273ffffffffffffffffffffffffffffffffffffffff16630f99191583836040518363ffffffff1660e01b8152600401610839929190611bef565b6000604051808303816000875af192505050801561087a57506040513d6000823e3d601f19601f820116820180604052508101906108779190611e2b565b60015b6108ed573d80600081146108aa576040519150601f19603f3d011682016040523d82523d6000602084013e6108af565b606091505b50806040517f5d7e47ec0000000000000000000000000000000000000000000000000000000081526004016108e49190611e74565b60405180910390fd5b50505050565b60006108fd610f24565b90506000610909610f33565b90506000610915610f42565b90506000600167ffffffffffffffff81111561093457610933611c24565b5b60405190808252806020026020018201604052801561096d57816020015b61095a610f4e565b8152602001906001900390816109525790505b50905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806109ea5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610a9f578381600081518110610a0457610a03611434565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600081518110610a5757610a56611434565b5b602002602001015160200181815250506040518060200160405280600081525081600081518110610a8b57610a8a611434565b5b602002602001015160400181905250610bcc565b8281600081518110610ab457610ab3611434565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600081600081518110610b0857610b07611434565b5b602002602001015160200181815250508382604051602401610b2b929190611e96565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081600081518110610bbc57610bbb611434565b5b6020026020010151604001819052505b600060405180606001604052808381526020018781526020016000801b81525090508773ffffffffffffffffffffffffffffffffffffffff16630f99191588836040518363ffffffff1660e01b8152600401610c29929190612049565b6000604051808303816000875af1925050508015610c6a57506040513d6000823e3d601f19601f82011682018060405250810190610c679190611e2b565b60015b610cdd573d8060008114610c9a576040519150601f19603f3d011682016040523d82523d6000602084013e610c9f565b606091505b50806040517f49620fc9000000000000000000000000000000000000000000000000000000008152600401610cd49190611e74565b60405180910390fd5b505050505050505050565b606060006002836002610cfb91906120a8565b610d0591906120ea565b67ffffffffffffffff811115610d1e57610d1d611c24565b5b6040519080825280601f01601f191660200182016040528015610d505781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610d8857610d87611434565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610dec57610deb611434565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610e2c91906120a8565b610e3691906120ea565b90505b6001811115610ed6577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610e7857610e77611434565b5b1a60f81b828281518110610e8f57610e8e611434565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610ecf9061211e565b9050610e39565b5060008414610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190612193565b60405180910390fd5b8091505092915050565b6000604836033560601c905090565b6000603436033560601c905090565b60006020360335905090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610fce81610f99565b8114610fd957600080fd5b50565b600081359050610feb81610fc5565b92915050565b60006020828403121561100757611006610f8f565b5b600061101584828501610fdc565b91505092915050565b60008115159050919050565b6110338161101e565b82525050565b600060208201905061104e600083018461102a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107f82611054565b9050919050565b600061109182611074565b9050919050565b6110a181611086565b81146110ac57600080fd5b50565b6000813590506110be81611098565b92915050565b60006110cf82611074565b9050919050565b6110df816110c4565b81146110ea57600080fd5b50565b6000813590506110fc816110d6565b92915050565b600080fd5b60006060828403121561111d5761111c611102565b5b81905092915050565b60008060006060848603121561113f5761113e610f8f565b5b600061114d868287016110af565b935050602061115e868287016110ed565b925050604084013567ffffffffffffffff81111561117f5761117e610f94565b5b61118b86828701611107565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156111cf5780820151818401526020810190506111b4565b60008484015250505050565b6000601f19601f8301169050919050565b60006111f782611195565b61120181856111a0565b93506112118185602086016111b1565b61121a816111db565b840191505092915050565b6000602082019050818103600083015261123f81846111ec565b905092915050565b61125081611074565b82525050565b600060208201905061126b6000830184611247565b92915050565b61127a81611074565b811461128557600080fd5b50565b60008135905061129781611271565b92915050565b6000806000606084860312156112b6576112b5610f8f565b5b60006112c486828701611288565b93505060206112d586828701611288565b92505060406112e686828701610fdc565b9150509250925092565b6000819050919050565b611303816112f0565b82525050565b600060208201905061131e60008301846112fa565b92915050565b6000819050919050565b61133781611324565b82525050565b600081519050919050565b600082825260208201905092915050565b60006113648261133d565b61136e8185611348565b935061137e8185602086016111b1565b611387816111db565b840191505092915050565b60006040820190506113a7600083018561132e565b81810360208301526113b98184611359565b90509392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126113ee576113ed6113c2565b5b80840192508235915067ffffffffffffffff8211156114105761140f6113c7565b5b60208301925060208202360383131561142c5761142b6113cc565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008235600160600383360303811261147f5761147e6113c2565b5b80830191505092915050565b600080833560016020038436030381126114a8576114a76113c2565b5b80840192508235915067ffffffffffffffff8211156114ca576114c96113c7565b5b6020830192506001820236038313156114e6576114e56113cc565b5b509250929050565b6000819050919050565b600061151361150e61150984611054565b6114ee565b611054565b9050919050565b6000611525826114f8565b9050919050565b60006115378261151a565b9050919050565b6115478161152c565b82525050565b60006115588261151a565b9050919050565b6115688161154d565b82525050565b60006115798261151a565b9050919050565b6115898161156e565b82525050565b82818337600083830152505050565b60006115aa8385611348565b93506115b783858461158f565b6115c0836111db565b840190509392505050565b60006080820190506115e0600083018861153e565b6115ed602083018761155f565b6115fa6040830186611580565b818103606083015261160d81848661159e565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061166057607f821691505b60208210810361167357611672611619565b5b50919050565b6116828161101e565b811461168d57600080fd5b50565b60008151905061169f81611679565b92915050565b6000602082840312156116bb576116ba610f8f565b5b60006116c984828501611690565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060a082019050818103600083015261171b81886111ec565b9050818103602083015261172f81876111ec565b905061173e604083018661102a565b818103606083015261175081856111ec565b9050818103608083015261176481846111ec565b90509695505050505050565b600060ff82169050919050565b60008160f81b9050919050565b60006117958261177d565b9050919050565b6117ad6117a882611770565b61178a565b82525050565b600081905092915050565b60006117c98261133d565b6117d381856117b3565b93506117e38185602086016111b1565b80840191505092915050565b60006117fb828661179c565b60018201915061180b828561179c565b60018201915061181b82846117be565b9150819050949350505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261185457611853611832565b5b83810192508235915060208301925067ffffffffffffffff82111561187c5761187b611828565b5b6020820236038313156118925761189161182d565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006118c082611054565b9050919050565b6118d0816118b5565b81146118db57600080fd5b50565b6000813590506118ed816118c7565b92915050565b600061190260208401846118de565b905092915050565b611913816118b5565b82525050565b61192281611324565b811461192d57600080fd5b50565b60008135905061193f81611919565b92915050565b60006119546020840184611930565b905092915050565b61196581611324565b82525050565b6000808335600160200384360303811261198857611987611832565b5b83810192508235915060208301925067ffffffffffffffff8211156119b0576119af611828565b5b6001820236038313156119c6576119c561182d565b5b509250929050565b600082825260208201905092915050565b60006119eb83856119ce565b93506119f883858461158f565b611a01836111db565b840190509392505050565b600060608301611a1f60008401846118f3565b611a2c600086018261190a565b50611a3a6020840184611945565b611a47602086018261195c565b50611a55604084018461196b565b8583036040870152611a688382846119df565b925050508091505092915050565b6000611a828383611a0c565b905092915050565b600082356001606003833603038112611aa657611aa5611832565b5b82810191505092915050565b6000602082019050919050565b6000611acb838561189a565b935083602084028501611add846118ab565b8060005b87811015611b21578484038952611af88284611a8a565b611b028582611a76565b9450611b0d83611ab2565b925060208a01995050600181019050611ae1565b50829750879450505050509392505050565b611b3c816112f0565b8114611b4757600080fd5b50565b600081359050611b5981611b33565b92915050565b6000611b6e6020840184611b4a565b905092915050565b611b7f816112f0565b82525050565b600060608301611b986000840184611837565b8583036000870152611bab838284611abf565b92505050611bbc6020840184611945565b611bc9602086018261195c565b50611bd76040840184611b5f565b611be46040860182611b76565b508091505092915050565b6000604082019050611c046000830185611580565b8181036020830152611c168184611b85565b90509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c5c826111db565b810181811067ffffffffffffffff82111715611c7b57611c7a611c24565b5b80604052505050565b6000611c8e610f85565b9050611c9a8282611c53565b919050565b600067ffffffffffffffff821115611cba57611cb9611c24565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611cf057611cef611c24565b5b611cf9826111db565b9050602081019050919050565b6000611d19611d1484611cd5565b611c84565b905082815260208101848484011115611d3557611d34611cd0565b5b611d408482856111b1565b509392505050565b600082601f830112611d5d57611d5c611c1f565b5b8151611d6d848260208601611d06565b91505092915050565b6000611d89611d8484611c9f565b611c84565b90508083825260208201905060208402830185811115611dac57611dab611ccb565b5b835b81811015611df357805167ffffffffffffffff811115611dd157611dd0611c1f565b5b808601611dde8982611d48565b85526020850194505050602081019050611dae565b5050509392505050565b600082601f830112611e1257611e11611c1f565b5b8151611e22848260208601611d76565b91505092915050565b600060208284031215611e4157611e40610f8f565b5b600082015167ffffffffffffffff811115611e5f57611e5e610f94565b5b611e6b84828501611dfd565b91505092915050565b60006020820190508181036000830152611e8e8184611359565b905092915050565b6000604082019050611eab6000830185611247565b611eb8602083018461132e565b9392505050565b600081519050919050565b6000819050602082019050919050565b6000611ee58261133d565b611eef81856119ce565b9350611eff8185602086016111b1565b611f08816111db565b840191505092915050565b6000606083016000830151611f2b600086018261190a565b506020830151611f3e602086018261195c565b5060408301518482036040860152611f568282611eda565b9150508091505092915050565b6000611f6f8383611f13565b905092915050565b6000602082019050919050565b6000611f8f82611ebf565b611f99818561189a565b935083602082028501611fab85611eca565b8060005b85811015611fe75784840389528151611fc88582611f63565b9450611fd383611f77565b925060208a01995050600181019050611faf565b50829750879550505050505092915050565b600060608301600083015184820360008601526120168282611f84565b915050602083015161202b602086018261195c565b50604083015161203e6040860182611b76565b508091505092915050565b600060408201905061205e6000830185611580565b81810360208301526120708184611ff9565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120b382611324565b91506120be83611324565b92508282026120cc81611324565b915082820484148315176120e3576120e2612079565b5b5092915050565b60006120f582611324565b915061210083611324565b925082820190508082111561211857612117612079565b5b92915050565b600061212982611324565b91506000820361213c5761213b612079565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061217d6020836111a0565b915061218882612147565b602082019050919050565b600060208201905081810360008301526121ac81612170565b905091905056fea2646970667358221220c26865962c54bacc00f0347b49a8416dc51cded8d4d94605a7b2d8e6baef2c1764736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806366f5c27d1161006657806366f5c27d146101205780639b483f8a1461013e578063be193d271461015a578063c5a1d7f014610178578063d3d72d2a1461019657610093565b806301ffc9a7146100985780630227bad3146100c857806306fdde03146100e457806354fd4d5014610102575b600080fd5b6100b260048036038101906100ad9190610ff1565b6101b5565b6040516100bf9190611039565b60405180910390f35b6100e260048036038101906100dd9190611126565b610287565b005b6100ec610405565b6040516100f99190611225565b60405180910390f35b61010a610493565b6040516101179190611225565b60405180910390f35b610128610521565b6040516101359190611256565b60405180910390f35b6101586004803603810190610153919061129d565b610545565b005b6101626106e1565b60405161016f9190611039565b60405180910390f35b610180610705565b60405161018d9190611309565b60405180910390f35b61019e610729565b6040516101ac929190611392565b60405180910390f35b60007f3fce835e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061028057507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161415801561033057507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561037257336040517f895e14d40000000000000000000000000000000000000000000000000000000081526004016103699190611256565b60405180910390fd5b61037d8383836107fe565b600030848484806000019061039291906113d1565b60008181106103a4576103a3611434565b5b90506020028101906103b69190611463565b80604001906103c5919061148b565b6040516020016103d99594939291906115cb565b6040516020818303038152906040528051906020012060001c90506103ff8484836108f3565b50505050565b6000805461041290611648565b80601f016020809104026020016040519081016040528092919081815260200182805461043e90611648565b801561048b5780601f106104605761010080835404028352916020019161048b565b820191906000526020600020905b81548152906001019060200180831161046e57829003601f168201915b505050505081565b600180546104a090611648565b80601f01602080910402602001604051908101604052809291908181526020018280546104cc90611648565b80156105195780601f106104ee57610100808354040283529160200191610519565b820191906000526020600020905b8154815290600101906020018083116104fc57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b8273ffffffffffffffffffffffffffffffffffffffff16632f54bf6e336040518263ffffffff1660e01b815260040161057e9190611256565b602060405180830381865afa15801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf91906116a5565b6105f5576040517f77a796bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060606003808111156107405761073f6116d2565b5b9150306040516020016107539190611256565b60405160208183030381529060405290509091565b606061078e8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610ce8565b9050919050565b6060600080836000015184602001518560400151866060015187608001516040516020016107c7959493929190611701565b6040516020818303038152906040526040516020016107e8939291906117ef565b6040516020818303038152906040529050919050565b8273ffffffffffffffffffffffffffffffffffffffff16630f99191583836040518363ffffffff1660e01b8152600401610839929190611bef565b6000604051808303816000875af192505050801561087a57506040513d6000823e3d601f19601f820116820180604052508101906108779190611e2b565b60015b6108ed573d80600081146108aa576040519150601f19603f3d011682016040523d82523d6000602084013e6108af565b606091505b50806040517f5d7e47ec0000000000000000000000000000000000000000000000000000000081526004016108e49190611e74565b60405180910390fd5b50505050565b60006108fd610f24565b90506000610909610f33565b90506000610915610f42565b90506000600167ffffffffffffffff81111561093457610933611c24565b5b60405190808252806020026020018201604052801561096d57816020015b61095a610f4e565b8152602001906001900390816109525790505b50905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806109ea5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610a9f578381600081518110610a0457610a03611434565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600081518110610a5757610a56611434565b5b602002602001015160200181815250506040518060200160405280600081525081600081518110610a8b57610a8a611434565b5b602002602001015160400181905250610bcc565b8281600081518110610ab457610ab3611434565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600081600081518110610b0857610b07611434565b5b602002602001015160200181815250508382604051602401610b2b929190611e96565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081600081518110610bbc57610bbb611434565b5b6020026020010151604001819052505b600060405180606001604052808381526020018781526020016000801b81525090508773ffffffffffffffffffffffffffffffffffffffff16630f99191588836040518363ffffffff1660e01b8152600401610c29929190612049565b6000604051808303816000875af1925050508015610c6a57506040513d6000823e3d601f19601f82011682018060405250810190610c679190611e2b565b60015b610cdd573d8060008114610c9a576040519150601f19603f3d011682016040523d82523d6000602084013e610c9f565b606091505b50806040517f49620fc9000000000000000000000000000000000000000000000000000000008152600401610cd49190611e74565b60405180910390fd5b505050505050505050565b606060006002836002610cfb91906120a8565b610d0591906120ea565b67ffffffffffffffff811115610d1e57610d1d611c24565b5b6040519080825280601f01601f191660200182016040528015610d505781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610d8857610d87611434565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610dec57610deb611434565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610e2c91906120a8565b610e3691906120ea565b90505b6001811115610ed6577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610e7857610e77611434565b5b1a60f81b828281518110610e8f57610e8e611434565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610ecf9061211e565b9050610e39565b5060008414610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190612193565b60405180910390fd5b8091505092915050565b6000604836033560601c905090565b6000603436033560601c905090565b60006020360335905090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610fce81610f99565b8114610fd957600080fd5b50565b600081359050610feb81610fc5565b92915050565b60006020828403121561100757611006610f8f565b5b600061101584828501610fdc565b91505092915050565b60008115159050919050565b6110338161101e565b82525050565b600060208201905061104e600083018461102a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107f82611054565b9050919050565b600061109182611074565b9050919050565b6110a181611086565b81146110ac57600080fd5b50565b6000813590506110be81611098565b92915050565b60006110cf82611074565b9050919050565b6110df816110c4565b81146110ea57600080fd5b50565b6000813590506110fc816110d6565b92915050565b600080fd5b60006060828403121561111d5761111c611102565b5b81905092915050565b60008060006060848603121561113f5761113e610f8f565b5b600061114d868287016110af565b935050602061115e868287016110ed565b925050604084013567ffffffffffffffff81111561117f5761117e610f94565b5b61118b86828701611107565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156111cf5780820151818401526020810190506111b4565b60008484015250505050565b6000601f19601f8301169050919050565b60006111f782611195565b61120181856111a0565b93506112118185602086016111b1565b61121a816111db565b840191505092915050565b6000602082019050818103600083015261123f81846111ec565b905092915050565b61125081611074565b82525050565b600060208201905061126b6000830184611247565b92915050565b61127a81611074565b811461128557600080fd5b50565b60008135905061129781611271565b92915050565b6000806000606084860312156112b6576112b5610f8f565b5b60006112c486828701611288565b93505060206112d586828701611288565b92505060406112e686828701610fdc565b9150509250925092565b6000819050919050565b611303816112f0565b82525050565b600060208201905061131e60008301846112fa565b92915050565b6000819050919050565b61133781611324565b82525050565b600081519050919050565b600082825260208201905092915050565b60006113648261133d565b61136e8185611348565b935061137e8185602086016111b1565b611387816111db565b840191505092915050565b60006040820190506113a7600083018561132e565b81810360208301526113b98184611359565b90509392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126113ee576113ed6113c2565b5b80840192508235915067ffffffffffffffff8211156114105761140f6113c7565b5b60208301925060208202360383131561142c5761142b6113cc565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008235600160600383360303811261147f5761147e6113c2565b5b80830191505092915050565b600080833560016020038436030381126114a8576114a76113c2565b5b80840192508235915067ffffffffffffffff8211156114ca576114c96113c7565b5b6020830192506001820236038313156114e6576114e56113cc565b5b509250929050565b6000819050919050565b600061151361150e61150984611054565b6114ee565b611054565b9050919050565b6000611525826114f8565b9050919050565b60006115378261151a565b9050919050565b6115478161152c565b82525050565b60006115588261151a565b9050919050565b6115688161154d565b82525050565b60006115798261151a565b9050919050565b6115898161156e565b82525050565b82818337600083830152505050565b60006115aa8385611348565b93506115b783858461158f565b6115c0836111db565b840190509392505050565b60006080820190506115e0600083018861153e565b6115ed602083018761155f565b6115fa6040830186611580565b818103606083015261160d81848661159e565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061166057607f821691505b60208210810361167357611672611619565b5b50919050565b6116828161101e565b811461168d57600080fd5b50565b60008151905061169f81611679565b92915050565b6000602082840312156116bb576116ba610f8f565b5b60006116c984828501611690565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060a082019050818103600083015261171b81886111ec565b9050818103602083015261172f81876111ec565b905061173e604083018661102a565b818103606083015261175081856111ec565b9050818103608083015261176481846111ec565b90509695505050505050565b600060ff82169050919050565b60008160f81b9050919050565b60006117958261177d565b9050919050565b6117ad6117a882611770565b61178a565b82525050565b600081905092915050565b60006117c98261133d565b6117d381856117b3565b93506117e38185602086016111b1565b80840191505092915050565b60006117fb828661179c565b60018201915061180b828561179c565b60018201915061181b82846117be565b9150819050949350505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261185457611853611832565b5b83810192508235915060208301925067ffffffffffffffff82111561187c5761187b611828565b5b6020820236038313156118925761189161182d565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006118c082611054565b9050919050565b6118d0816118b5565b81146118db57600080fd5b50565b6000813590506118ed816118c7565b92915050565b600061190260208401846118de565b905092915050565b611913816118b5565b82525050565b61192281611324565b811461192d57600080fd5b50565b60008135905061193f81611919565b92915050565b60006119546020840184611930565b905092915050565b61196581611324565b82525050565b6000808335600160200384360303811261198857611987611832565b5b83810192508235915060208301925067ffffffffffffffff8211156119b0576119af611828565b5b6001820236038313156119c6576119c561182d565b5b509250929050565b600082825260208201905092915050565b60006119eb83856119ce565b93506119f883858461158f565b611a01836111db565b840190509392505050565b600060608301611a1f60008401846118f3565b611a2c600086018261190a565b50611a3a6020840184611945565b611a47602086018261195c565b50611a55604084018461196b565b8583036040870152611a688382846119df565b925050508091505092915050565b6000611a828383611a0c565b905092915050565b600082356001606003833603038112611aa657611aa5611832565b5b82810191505092915050565b6000602082019050919050565b6000611acb838561189a565b935083602084028501611add846118ab565b8060005b87811015611b21578484038952611af88284611a8a565b611b028582611a76565b9450611b0d83611ab2565b925060208a01995050600181019050611ae1565b50829750879450505050509392505050565b611b3c816112f0565b8114611b4757600080fd5b50565b600081359050611b5981611b33565b92915050565b6000611b6e6020840184611b4a565b905092915050565b611b7f816112f0565b82525050565b600060608301611b986000840184611837565b8583036000870152611bab838284611abf565b92505050611bbc6020840184611945565b611bc9602086018261195c565b50611bd76040840184611b5f565b611be46040860182611b76565b508091505092915050565b6000604082019050611c046000830185611580565b8181036020830152611c168184611b85565b90509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c5c826111db565b810181811067ffffffffffffffff82111715611c7b57611c7a611c24565b5b80604052505050565b6000611c8e610f85565b9050611c9a8282611c53565b919050565b600067ffffffffffffffff821115611cba57611cb9611c24565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611cf057611cef611c24565b5b611cf9826111db565b9050602081019050919050565b6000611d19611d1484611cd5565b611c84565b905082815260208101848484011115611d3557611d34611cd0565b5b611d408482856111b1565b509392505050565b600082601f830112611d5d57611d5c611c1f565b5b8151611d6d848260208601611d06565b91505092915050565b6000611d89611d8484611c9f565b611c84565b90508083825260208201905060208402830185811115611dac57611dab611ccb565b5b835b81811015611df357805167ffffffffffffffff811115611dd157611dd0611c1f565b5b808601611dde8982611d48565b85526020850194505050602081019050611dae565b5050509392505050565b600082601f830112611e1257611e11611c1f565b5b8151611e22848260208601611d76565b91505092915050565b600060208284031215611e4157611e40610f8f565b5b600082015167ffffffffffffffff811115611e5f57611e5e610f94565b5b611e6b84828501611dfd565b91505092915050565b60006020820190508181036000830152611e8e8184611359565b905092915050565b6000604082019050611eab6000830185611247565b611eb8602083018461132e565b9392505050565b600081519050919050565b6000819050602082019050919050565b6000611ee58261133d565b611eef81856119ce565b9350611eff8185602086016111b1565b611f08816111db565b840191505092915050565b6000606083016000830151611f2b600086018261190a565b506020830151611f3e602086018261195c565b5060408301518482036040860152611f568282611eda565b9150508091505092915050565b6000611f6f8383611f13565b905092915050565b6000602082019050919050565b6000611f8f82611ebf565b611f99818561189a565b935083602082028501611fab85611eca565b8060005b85811015611fe75784840389528151611fc88582611f63565b9450611fd383611f77565b925060208a01995050600181019050611faf565b50829750879550505050505092915050565b600060608301600083015184820360008601526120168282611f84565b915050602083015161202b602086018261195c565b50604083015161203e6040860182611b76565b508091505092915050565b600060408201905061205e6000830185611580565b81810360208301526120708184611ff9565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120b382611324565b91506120be83611324565b92508282026120cc81611324565b915082820484148315176120e3576120e2612079565b5b5092915050565b60006120f582611324565b915061210083611324565b925082820190508082111561211857612117612079565b5b92915050565b600061212982611324565b91506000820361213c5761213b612079565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061217d6020836111a0565b915061218882612147565b602082019050919050565b600060208201905081810360008301526121ac81612170565b905091905056fea2646970667358221220c26865962c54bacc00f0347b49a8416dc51cded8d4d94605a7b2d8e6baef2c1764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "metadataProvider()": {
        "returns": {
          "location": "bytes",
          "providerType": "uint256 Type of metadata provider"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "metadataProvider()": {
        "notice": "A function that returns information about the type of metadata provider and its location.         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/."
      },
      "name()": {
        "notice": "A funtion that returns name of the plugin"
      },
      "requiresRootAccess()": {
        "notice": "A function that indicates if the plugin requires root access to a Safe."
      },
      "version()": {
        "notice": "A function that returns version of the plugin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2685,
        "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2687,
        "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2943,
        "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
        "label": "safeGuard",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(SafeGuard)2938_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_uint256)"
      },
      "t_mapping(t_address,t_struct(SafeGuard)2938_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SafePaymasterPlugin.SafeGuard)",
        "numberOfBytes": "32",
        "value": "t_struct(SafeGuard)2938_storage"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SafeGuard)2938_storage": {
        "encoding": "inplace",
        "label": "struct SafePaymasterPlugin.SafeGuard",
        "members": [
          {
            "astId": 2931,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "allowedCalls",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
          },
          {
            "astId": 2937,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "userAllowancePerMethod",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}