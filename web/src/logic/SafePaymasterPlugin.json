{
  "address": "0xE0fd661B2657bacEF22e8c8C5956000207cdF88a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Indexer",
          "name": "_indexer",
          "type": "address"
        },
        {
          "internalType": "bytes16",
          "name": "appId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "FeePaymentFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "data",
          "type": "bytes4"
        }
      ],
      "name": "InvalidRelayMethod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRelayTarget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSafePaymaster",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OneTransactionEachTime",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RelayExecutionFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "origin",
          "type": "address"
        }
      ],
      "name": "UntrustedOrigin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "invalidZKProof",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadataHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Metadata",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER_V2",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APP_ID",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_IMPERSONATION_MODE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SISMO_CONNECT_LIB_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "appId",
              "type": "bytes16"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isImpersonationMode",
                  "type": "bool"
                }
              ],
              "internalType": "struct VaultConfig",
              "name": "vault",
              "type": "tuple"
            }
          ],
          "internalType": "struct SismoConnectConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "methods",
          "type": "bytes4[]"
        },
        {
          "internalType": "string",
          "name": "guardMetadataCID",
          "type": "string"
        }
      ],
      "name": "deleteAllowedInteractions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SafeProtocolAction[]",
              "name": "actions",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SafeTransaction",
          "name": "safetx",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proofs",
          "type": "bytes"
        }
      ],
      "name": "executeFromPlugin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataProvider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "providerType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "location",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiresRootAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "methods",
          "type": "bytes4[]"
        },
        {
          "components": [
            {
              "internalType": "enum ClaimType",
              "name": "claimType",
              "type": "uint8"
            },
            {
              "internalType": "bytes16",
              "name": "groupId",
              "type": "bytes16"
            },
            {
              "internalType": "bytes16",
              "name": "groupTimestamp",
              "type": "bytes16"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOptional",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isSelectableByUser",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ClaimRequest[]",
          "name": "_claims",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_timesPerAddress",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "guardMetadataCID",
          "type": "string"
        }
      ],
      "name": "setAllowedInteractions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponseProofs",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "relayFor",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ClaimType",
              "name": "claimType",
              "type": "uint8"
            },
            {
              "internalType": "bytes16",
              "name": "groupId",
              "type": "bytes16"
            },
            {
              "internalType": "bytes16",
              "name": "groupTimestamp",
              "type": "bytes16"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOptional",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isSelectableByUser",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ClaimRequest[]",
          "name": "requestRequiredClaims",
          "type": "tuple[]"
        }
      ],
      "name": "verifySismoClaims",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e04f10881a0c8e7b229e7dd1068094081811d988eaf24f03679c7c464e75845",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x044B595C9b94A17Adc489bD29696af40ccb3E4d2",
    "contractAddress": null,
    "transactionIndex": 14,
    "gasUsed": "3429362",
    "logsBloom": "0x
    "blockHash": "0x526af162686c56ef85c86335b93ccaa1c574350b59ec7599986f8e494c113bf0",
    "transactionHash": "0x1e04f10881a0c8e7b229e7dd1068094081811d988eaf24f03679c7c464e75845",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 9901447,
        "transactionHash": "0x1e04f10881a0c8e7b229e7dd1068094081811d988eaf24f03679c7c464e75845",
        "address": "0xE0fd661B2657bacEF22e8c8C5956000207cdF88a",
        "topics": [
          "0x522c683f99251eea7f3b027592e92a5398e7582983be1f7c0f33715ce025740f",
          "0xc2c52798df6af516a2a0e3155d9b2ff901c3f90471f9fa8b0991c4124d09c12d"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001e2000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000b5465737420506c7567696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006468747470733a2f2f6e696a6f65312e6769746875622e696f2f536166652e5061796d61737465722f232f7a6b536166655061796d61737465722f30786530666436363162323635376261636566323265386338633539353630303032303763646638386100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 59,
        "blockHash": "0x526af162686c56ef85c86335b93ccaa1c574350b59ec7599986f8e494c113bf0"
      }
    ],
    "blockNumber": 9901447,
    "cumulativeGasUsed": "8353022",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7b696B84e41aC829517e94C29bDD8740c043ab05",
    "0x2d31f5ac41cdeba21728cca8842ff2f7"
  ],
  "numDeployments": 3,
  "solcInputHash": "5d7bc37f40b33e046a3526c56c0197cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Indexer\",\"name\":\"_indexer\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"appId\",\"type\":\"bytes16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FeePaymentFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"data\",\"type\":\"bytes4\"}],\"name\":\"InvalidRelayMethod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRelayTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSafePaymaster\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OneTransactionEachTime\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RelayExecutionFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"UntrustedOrigin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidZKProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Metadata\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER_V2\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APP_ID\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_IMPERSONATION_MODE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SISMO_CONNECT_LIB_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"appId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isImpersonationMode\",\"type\":\"bool\"}],\"internalType\":\"struct VaultConfig\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct SismoConnectConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"methods\",\"type\":\"bytes4[]\"},{\"internalType\":\"string\",\"name\":\"guardMetadataCID\",\"type\":\"string\"}],\"name\":\"deleteAllowedInteractions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SafeProtocolAction[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct SafeTransaction\",\"name\":\"safetx\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proofs\",\"type\":\"bytes\"}],\"name\":\"executeFromPlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"providerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiresRootAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"methods\",\"type\":\"bytes4[]\"},{\"components\":[{\"internalType\":\"enum ClaimType\",\"name\":\"claimType\",\"type\":\"uint8\"},{\"internalType\":\"bytes16\",\"name\":\"groupId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"groupTimestamp\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOptional\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSelectableByUser\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct ClaimRequest[]\",\"name\":\"_claims\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_timesPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"guardMetadataCID\",\"type\":\"string\"}],\"name\":\"setAllowedInteractions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponseProofs\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayFor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ClaimType\",\"name\":\"claimType\",\"type\":\"uint8\"},{\"internalType\":\"bytes16\",\"name\":\"groupId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"groupTimestamp\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOptional\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSelectableByUser\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct ClaimRequest[]\",\"name\":\"requestRequiredClaims\",\"type\":\"tuple[]\"}],\"name\":\"verifySismoClaims\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"metadataProvider()\":{\"returns\":{\"location\":\"bytes\",\"providerType\":\"uint256 Type of metadata provider\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metadataProvider()\":{\"notice\":\"A function that returns information about the type of metadata provider and its location.         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\"},\"name()\":{\"notice\":\"A funtion that returns name of the plugin\"},\"requiresRootAccess()\":{\"notice\":\"A function that indicates if the plugin requires root access to a Safe.\"},\"version()\":{\"notice\":\"A function that returns version of the plugin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafePaymasterPlugin.sol\":\"SafePaymasterPlugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayERC2771Base} from \\\"./base/GelatoRelayERC2771Base.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 92; // offset: address + address + uint256 + address\\nuint256 constant _FEE_TOKEN_START = 72; // offset: address + uint256 + address\\nuint256 constant _FEE_START = 52; // offset: uint256 + address\\nuint256 constant _MSG_SENDER_START = 20; // offset: address\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContextERC2771()\\n    pure\\n    returns (address feeCollector)\\n{\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContextERC2771() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContextERC2771() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getMsgSenderRelayContextERC2771() pure returns (address _msgSender) {\\n    assembly {\\n        _msgSender := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _MSG_SENDER_START))\\n        )\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken, fee, _msgSender appended to msg.data\\n * Expects calldata encoding:\\n    abi.encodePacked(\\n        _data,\\n        _feeCollector,\\n        _feeToken,\\n        _fee,\\n        _msgSender\\n    );\\n * Therefore, we're expecting 20 + 20 + 32 + 20 = 92 bytes to be appended to normal msgData\\n *     feeCollector: - 92 bytes\\n *     feeToken: - 72 bytes\\n *     fee: - 52 bytes\\n *     _msgSender: - 20 bytes\\n */\\n\\n/// @dev Do not use with GelatoRelayFeeCollectorERC2771 - pick only one\\nabstract contract GelatoRelayContextERC2771 is GelatoRelayERC2771Base {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFee() internal {\\n        _getFeeToken().transferFrom(\\n            _getMsgSender(),\\n            _getFeeCollector(),\\n            _getFee()\\n        );\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferFromRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transferFrom(_getMsgSender(), _getFeeCollector(), fee);\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFeeCappedWithPermit(\\n        uint256 _maxFee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferFromRelayFeeCappedWithPermit: maxFee\\\"\\n        );\\n\\n        address from = _getMsgSender();\\n        address token = _getFeeToken();\\n\\n        token.permit(from, address(this), _maxFee, _deadline, _v, _r, _s);\\n        token.transferFrom(from, _getFeeCollector(), fee);\\n    }\\n\\n    function _getMsgData() internal view virtual returns (bytes calldata) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    function _getMsgSender() internal view virtual returns (address) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? _getMsgSenderRelayContextERC2771()\\n                : msg.sender;\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContextERC2771();\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContextERC2771();\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContextERC2771();\\n    }\\n}\\n\",\"keccak256\":\"0xb1e64af21e3d0045989a60e1cd917b02233d8406ae5e735a610f4ebd2a4bc160\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {\\n    GELATO_RELAY_ERC2771,\\n    GELATO_RELAY_CONCURRENT_ERC2771,\\n    GELATO_RELAY_ERC2771_ZKSYNC,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC\\n} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayERC2771Base {\\n    modifier onlyGelatoRelayERC2771() {\\n        require(_isGelatoRelayERC2771(msg.sender), \\\"onlyGelatoRelayERC2771\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelayERC2771(address _forwarder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // Use another address on zkSync\\n        if (block.chainid == 324 || block.chainid == 280) {\\n            return (_forwarder == GELATO_RELAY_ERC2771_ZKSYNC ||\\n                _forwarder == GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC);\\n        }\\n        return (_forwarder == GELATO_RELAY_ERC2771 ||\\n            _forwarder == GELATO_RELAY_CONCURRENT_ERC2771);\\n    }\\n}\\n\",\"keccak256\":\"0x246a6118801ef8095aa202daa0d2558f278207bebcaccbb4822dbcf3c3170a3a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771 = 0x8598806401A63Ddf52473F1B3C55bC9E33e2d73b;\\n\\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC = 0xBa4082F4961c8Fb76231995C967CD9aa40f321b5;\\n\",\"keccak256\":\"0x2235b1c6cf1f9b559ac882f80153f7dd97648780b98dd93370c901ad522dcb11\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    IERC20Permit\\n} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function permit(\\n        address _token,\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal onlyERC20(_token) {\\n        IERC20Permit(_token).safePermit(\\n            _owner,\\n            _spender,\\n            _value,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0xe253b669748d9af2d2524855f49992ccc434c4a95a9a737ab03ef550749d5a14\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nstruct SafeProtocolAction {\\n    address payable to;\\n    uint256 value;\\n    bytes data;\\n}\\n\\nstruct SafeTransaction {\\n    SafeProtocolAction[] actions;\\n    uint256 nonce;\\n    bytes32 metadataHash;\\n}\\n\\nstruct SafeRootAccess {\\n    SafeProtocolAction action;\\n    uint256 nonce;\\n    bytes32 metadataHash;\\n}\\n\",\"keccak256\":\"0xfcce6a99ceb499693f9a33aa624affcefcbb9af1fb328f4b2bc4b9f245bb48ba\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ISafe Declares the functions that are called on a Safe by Safe{Core} Protocol.\\n */\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address payable to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\\n\",\"keccak256\":\"0xa3dd0d1c1c701479d294e384c4350e3829e69045a2c740a62da353eac45ef258\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeTransaction, SafeRootAccess} from \\\"../DataTypes.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ISafeProtocolFunctionHandler - An interface that a Safe function handler should implement to handle static calls.\\n * @notice In Safe{Core} Protocol, a function handler can be used to add additional functionality to a Safe.\\n *         User(s) should add SafeProtocolManager as a function handler (aka fallback handler in Safe v1.x) to the Safe\\n *         and enable the contract implementing ISafeProtocolFunctionHandler interface as a function handler in the\\n *         SafeProtocolManager for the specific function identifier.\\n */\\ninterface ISafeProtocolFunctionHandler is IERC165 {\\n    /**\\n     * @notice Handles calls to the Safe contract forwarded by the fallback function.\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external returns (bytes memory result);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n}\\n\\n/**\\n * @title ISafeProtocolStaticFunctionHandler - An interface that a Safe functionhandler should implement in case when handling static calls\\n * @notice In Safe{Core} Protocol, a function handler can be used to add additional functionality to a Safe.\\n *         User(s) should add SafeProtocolManager as a function handler (aka fallback handler in Safe v1.x) to the Safe\\n *         and enable the contract implementing ISafeProtocolStaticFunctionHandler interface as a function handler in the\\n *         SafeProtocolManager for the specific function identifier.\\n */\\ninterface ISafeProtocolStaticFunctionHandler is IERC165 {\\n    /**\\n     * @notice Handles static calls to the Safe contract forwarded by the fallback function.\\n     * @param safe A Safe instance\\n     * @param sender Address of the sender\\n     * @param value Amount of ETH\\n     * @param data Arbitrary length bytes\\n     * @return result Arbitrary length bytes containing result of the operation\\n     */\\n    function handle(ISafe safe, address sender, uint256 value, bytes calldata data) external view returns (bytes memory result);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n}\\n\\n/**\\n * @title ISafeProtocolHooks - An interface that a contract should implement to be enabled as hooks.\\n * @notice In Safe{Core} Protocol, hooks can approve or deny transactions based on the logic it implements.\\n */\\ninterface ISafeProtocolHooks is IERC165 {\\n    /**\\n     * @notice A function that will be called by a Safe before the execution of a transaction if the hooks are enabled\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for non-root access.\\n     * @param safe A Safe instance\\n     * @param tx A struct of type SafeTransaction that contains the details of the transaction.\\n     * @param executionType uint256\\n     * @param executionMeta Arbitrary length of bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheck(\\n        ISafe safe,\\n        SafeTransaction calldata tx,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe before the execution of a transaction if the hooks are enabled and\\n     *         transaction requies tool access.\\n     * @dev Add custom logic in this function to validate the pre-state and contents of transaction for root access.\\n     * @param safe A Safe instance\\n     * @param rootAccess DataTypes.SafeRootAccess\\n     * @param executionType uint256\\n     * @param executionMeta bytes\\n     * @return preCheckData bytes\\n     */\\n    function preCheckRootAccess(\\n        ISafe safe,\\n        SafeRootAccess calldata rootAccess,\\n        uint256 executionType,\\n        bytes calldata executionMeta\\n    ) external returns (bytes memory preCheckData);\\n\\n    /**\\n     * @notice A function that will be called by a safe after the execution of a transaction if the hooks are enabled. Hooks should revert if the post state of after the transaction is not as expected.\\n     * @dev Add custom logic in this function to validate the post-state after the transaction is executed.\\n     * @param safe ISafe\\n     * @param success bool\\n     * @param preCheckData Arbitrary length bytes that was returned by during pre-check of the transaction.\\n     */\\n    function postCheck(ISafe safe, bool success, bytes calldata preCheckData) external;\\n}\\n\\n/**\\n * @title ISafeProtocolPlugin - An interface that a Safe plugin should implement\\n */\\ninterface ISafeProtocolPlugin is IERC165 {\\n    /**\\n     * @notice A funtion that returns name of the plugin\\n     * @return name string name of the plugin\\n     */\\n    function name() external view returns (string memory name);\\n\\n    /**\\n     * @notice A function that returns version of the plugin\\n     * @return version string version of the plugin\\n     */\\n    function version() external view returns (string memory version);\\n\\n    /**\\n     * @notice A function that returns information about the type of metadata provider and its location.\\n     *         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/.\\n     * @return providerType uint256 Type of metadata provider\\n     * @return location bytes\\n     */\\n    function metadataProvider() external view returns (uint256 providerType, bytes memory location);\\n\\n    /**\\n     * @notice A function that indicates if the plugin requires root access to a Safe.\\n     * @return requiresRootAccess True if root access is required, false otherwise.\\n     */\\n    function requiresRootAccess() external view returns (bool requiresRootAccess);\\n}\\n\",\"keccak256\":\"0x31362db1a2641c47d3456c02b31dba8f8b860082ea8d984fae5737d77199a6a7\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-core-protocol/contracts/interfaces/Manager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\nimport {ISafe} from \\\"./Accounts.sol\\\";\\nimport {SafeRootAccess, SafeTransaction} from \\\"../DataTypes.sol\\\";\\n\\n/**\\n * @title ISafeProtocolManager interface a Manager should implement\\n * @notice A mediator checks the status of the integration through the registry and allows only\\n *         listed and non-flagged integrations to execute transactions. A Safe account should\\n *         add a mediator as a plugin.\\n */\\ninterface ISafeProtocolManager {\\n    /**\\n     * @notice This function allows enabled plugins to execute non-delegate call transactions thorugh a Safe.\\n     *         It should validate the status of the plugin through the registry and allows only listed and non-flagged integrations to execute transactions.\\n     * @param safe Address of a Safe account\\n     * @param transaction SafeTransaction instance containing payload information about the transaction\\n     * @return data Array of bytes types returned upon the successful execution of all the actions. The size of the array will be the same as the size of the actions\\n     *         in case of succcessful execution. Empty if the call failed.\\n     */\\n    function executeTransaction(ISafe safe, SafeTransaction calldata transaction) external returns (bytes[] memory data);\\n\\n    /**\\n     * @notice This function allows enabled plugins to execute delegate call transactions thorugh a Safe.\\n     *         It should validate the status of the plugin through the registry and allows only listed and non-flagged integrations to execute transactions.\\n     * @param safe Address of a Safe account\\n     * @param rootAccess SafeTransaction instance containing payload information about the transaction\\n     * @return data Arbitrary length bytes data returned upon the successful execution. The size of the array will be the same as the size of the actions\\n     *         in case of succcessful execution. Empty if the call failed.\\n     */\\n    function executeRootAccess(ISafe safe, SafeRootAccess calldata rootAccess) external returns (bytes memory data);\\n}\\n\",\"keccak256\":\"0x50c41530ee7788b90e2a12b1669642cb6dd316cde100cfe4ee2eebddd3db7ef6\",\"license\":\"LGPL-3.0-only\"},\"@sismo-core/sismo-connect-solidity/contracts/SismoConnectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IAddressesProvider} from \\\"./interfaces/IAddressesProvider.sol\\\";\\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \\\"./interfaces/ISismoConnectVerifier.sol\\\";\\nimport {AuthRequestBuilder, AuthRequest, AuthType} from \\\"./utils/AuthRequestBuilder.sol\\\";\\nimport {ClaimRequestBuilder, ClaimRequest, ClaimType} from \\\"./utils/ClaimRequestBuilder.sol\\\";\\nimport {SignatureBuilder, SignatureRequest} from \\\"./utils/SignatureBuilder.sol\\\";\\nimport {RequestBuilder, AuthRequest, ClaimRequest, SignatureRequest, SismoConnectRequest} from \\\"./utils/RequestBuilder.sol\\\";\\n\\nimport {Auth, VerifiedAuth, Claim, VerifiedClaim, Signature, SismoConnectResponse, SismoConnectConfig, VaultConfig} from \\\"./utils/Structs.sol\\\";\\nimport {SismoConnectHelper} from \\\"./utils/SismoConnectHelper.sol\\\";\\n\\ncontract SismoConnect {\\n  uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\\n\\n  IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\\n    IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\\n\\n  ISismoConnectVerifier immutable _sismoConnectVerifier;\\n\\n  // external libraries\\n  AuthRequestBuilder immutable _authRequestBuilder;\\n  ClaimRequestBuilder immutable _claimRequestBuilder;\\n  SignatureBuilder immutable _signatureBuilder;\\n  RequestBuilder immutable _requestBuilder;\\n\\n  // config\\n  bytes16 public immutable APP_ID;\\n  bool public immutable IS_IMPERSONATION_MODE;\\n\\n  constructor(SismoConnectConfig memory _config) {\\n    APP_ID = _config.appId;\\n    IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\\n\\n    _sismoConnectVerifier = ISismoConnectVerifier(\\n      ADDRESSES_PROVIDER_V2.get(string(\\\"sismoConnectVerifier-v1.2\\\"))\\n    );\\n    // external libraries\\n    _authRequestBuilder = AuthRequestBuilder(\\n      ADDRESSES_PROVIDER_V2.get(string(\\\"authRequestBuilder-v1.1\\\"))\\n    );\\n    _claimRequestBuilder = ClaimRequestBuilder(\\n      ADDRESSES_PROVIDER_V2.get(string(\\\"claimRequestBuilder-v1.1\\\"))\\n    );\\n    _signatureBuilder = SignatureBuilder(\\n      ADDRESSES_PROVIDER_V2.get(string(\\\"signatureBuilder-v1.1\\\"))\\n    );\\n    _requestBuilder = RequestBuilder(ADDRESSES_PROVIDER_V2.get(string(\\\"requestBuilder-v1.1\\\")));\\n  }\\n\\n  // public function because it needs to be used by this contract and can be used by other contracts\\n  function config() public view returns (SismoConnectConfig memory) {\\n    return buildConfig(APP_ID, IS_IMPERSONATION_MODE);\\n  }\\n\\n  function buildConfig(bytes16 appId) internal pure returns (SismoConnectConfig memory) {\\n    return SismoConnectConfig({appId: appId, vault: buildVaultConfig()});\\n  }\\n\\n  function buildConfig(\\n    bytes16 appId,\\n    bool isImpersonationMode\\n  ) internal pure returns (SismoConnectConfig memory) {\\n    return SismoConnectConfig({appId: appId, vault: buildVaultConfig(isImpersonationMode)});\\n  }\\n\\n  function buildVaultConfig() internal pure returns (VaultConfig memory) {\\n    return VaultConfig({isImpersonationMode: false});\\n  }\\n\\n  function buildVaultConfig(bool isImpersonationMode) internal pure returns (VaultConfig memory) {\\n    return VaultConfig({isImpersonationMode: isImpersonationMode});\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auth, claim, signature, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auth, claim, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest memory auth,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auth, signature, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(claim, signature, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest memory auth,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auth, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    ClaimRequest memory claim,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(claim, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auth, claim, signature);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auth, claim);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest memory auth,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auth, signature);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(claim, signature);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest memory auth\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auth);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    ClaimRequest memory claim\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(claim);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    SismoConnectRequest memory request\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auths, claims, signature, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auths, claims, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest[] memory auths,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auths, signature, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(claims, signature, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest[] memory auths,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auths, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    ClaimRequest[] memory claims,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(claims, namespace);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auths, claims, signature);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auths, claims);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest[] memory auths,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auths, signature);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(claims, signature);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    AuthRequest[] memory auths\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(auths);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function verify(\\n    bytes memory responseBytes,\\n    ClaimRequest[] memory claims\\n  ) internal view returns (SismoConnectVerifiedResult memory) {\\n    SismoConnectResponse memory response = abi.decode(responseBytes, (SismoConnectResponse));\\n    SismoConnectRequest memory request = buildRequest(claims);\\n    return _sismoConnectVerifier.verify(response, request, config());\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    ClaimType claimType,\\n    bytes memory extraData\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp, value, claimType, extraData);\\n  }\\n\\n  function buildClaim(bytes16 groupId) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp);\\n  }\\n\\n  function buildClaim(bytes16 groupId, uint256 value) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, value);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    ClaimType claimType\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, claimType);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes memory extraData\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, extraData);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp, value);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    ClaimType claimType\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp, claimType);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    bytes memory extraData\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp, extraData);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    uint256 value,\\n    ClaimType claimType\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, value, claimType);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    uint256 value,\\n    bytes memory extraData\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, value, extraData);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    ClaimType claimType,\\n    bytes memory extraData\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, claimType, extraData);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    ClaimType claimType\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp, value, claimType);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    bytes memory extraData\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp, value, extraData);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    ClaimType claimType,\\n    bytes memory extraData\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp, claimType, extraData);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    uint256 value,\\n    ClaimType claimType,\\n    bytes memory extraData\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, value, claimType, extraData);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, isOptional, isSelectableByUser);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, groupTimestamp, isOptional, isSelectableByUser);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    uint256 value,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, value, isOptional, isSelectableByUser);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, claimType, isOptional, isSelectableByUser);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (ClaimRequest memory) {\\n    return\\n      _claimRequestBuilder.build(groupId, groupTimestamp, value, isOptional, isSelectableByUser);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (ClaimRequest memory) {\\n    return\\n      _claimRequestBuilder.build(\\n        groupId,\\n        groupTimestamp,\\n        claimType,\\n        isOptional,\\n        isSelectableByUser\\n      );\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    uint256 value,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (ClaimRequest memory) {\\n    return _claimRequestBuilder.build(groupId, value, claimType, isOptional, isSelectableByUser);\\n  }\\n\\n  function buildClaim(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (ClaimRequest memory) {\\n    return\\n      _claimRequestBuilder.build(\\n        groupId,\\n        groupTimestamp,\\n        value,\\n        claimType,\\n        isOptional,\\n        isSelectableByUser\\n      );\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId,\\n    bytes memory extraData\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, isAnon, userId, extraData);\\n  }\\n\\n  function buildAuth(AuthType authType) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType);\\n  }\\n\\n  function buildAuth(AuthType authType, bool isAnon) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, isAnon);\\n  }\\n\\n  function buildAuth(AuthType authType, uint256 userId) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, userId);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    bytes memory extraData\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, extraData);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, isAnon, userId);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    bool isAnon,\\n    bytes memory extraData\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, isAnon, extraData);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    uint256 userId,\\n    bytes memory extraData\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, userId, extraData);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    bool isOptional,\\n    bool isSelectableByUser,\\n    uint256 userId\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, isOptional, isSelectableByUser, userId);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    bool isAnon,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, isAnon, isOptional, isSelectableByUser);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    uint256 userId,\\n    bool isOptional\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, userId, isOptional);\\n  }\\n\\n  function buildAuth(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId,\\n    bool isOptional\\n  ) internal view returns (AuthRequest memory) {\\n    return _authRequestBuilder.build(authType, isAnon, userId, isOptional);\\n  }\\n\\n  function buildSignature(bytes memory message) internal view returns (SignatureRequest memory) {\\n    return _signatureBuilder.build(message);\\n  }\\n\\n  function buildSignature(\\n    bytes memory message,\\n    bool isSelectableByUser\\n  ) internal view returns (SignatureRequest memory) {\\n    return _signatureBuilder.build(message, isSelectableByUser);\\n  }\\n\\n  function buildSignature(\\n    bytes memory message,\\n    bytes memory extraData\\n  ) internal view returns (SignatureRequest memory) {\\n    return _signatureBuilder.build(message, extraData);\\n  }\\n\\n  function buildSignature(\\n    bytes memory message,\\n    bool isSelectableByUser,\\n    bytes memory extraData\\n  ) internal view returns (SignatureRequest memory) {\\n    return _signatureBuilder.build(message, isSelectableByUser, extraData);\\n  }\\n\\n  function buildSignature(bool isSelectableByUser) internal view returns (SignatureRequest memory) {\\n    return _signatureBuilder.build(isSelectableByUser);\\n  }\\n\\n  function buildSignature(\\n    bool isSelectableByUser,\\n    bytes memory extraData\\n  ) internal view returns (SignatureRequest memory) {\\n    return _signatureBuilder.build(isSelectableByUser, extraData);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auth, claim, signature);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auth, claim, _GET_EMPTY_SIGNATURE_REQUEST());\\n  }\\n\\n  function buildRequest(\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(claim, signature);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest memory auth,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auth, signature);\\n  }\\n\\n  function buildRequest(\\n    ClaimRequest memory claim\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(claim, _GET_EMPTY_SIGNATURE_REQUEST());\\n  }\\n\\n  function buildRequest(\\n    AuthRequest memory auth\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auth, _GET_EMPTY_SIGNATURE_REQUEST());\\n  }\\n\\n  function buildRequest(\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auth, claim, signature, namespace);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auth, claim, _GET_EMPTY_SIGNATURE_REQUEST(), namespace);\\n  }\\n\\n  function buildRequest(\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(claim, signature, namespace);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest memory auth,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auth, signature, namespace);\\n  }\\n\\n  function buildRequest(\\n    ClaimRequest memory claim,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(claim, _GET_EMPTY_SIGNATURE_REQUEST(), namespace);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest memory auth,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auth, _GET_EMPTY_SIGNATURE_REQUEST(), namespace);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auths, claims, signature);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auths, claims, _GET_EMPTY_SIGNATURE_REQUEST());\\n  }\\n\\n  function buildRequest(\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(claims, signature);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest[] memory auths,\\n    SignatureRequest memory signature\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auths, signature);\\n  }\\n\\n  function buildRequest(\\n    ClaimRequest[] memory claims\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(claims, _GET_EMPTY_SIGNATURE_REQUEST());\\n  }\\n\\n  function buildRequest(\\n    AuthRequest[] memory auths\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auths, _GET_EMPTY_SIGNATURE_REQUEST());\\n  }\\n\\n  function buildRequest(\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auths, claims, signature, namespace);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auths, claims, _GET_EMPTY_SIGNATURE_REQUEST(), namespace);\\n  }\\n\\n  function buildRequest(\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(claims, signature, namespace);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest[] memory auths,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auths, signature, namespace);\\n  }\\n\\n  function buildRequest(\\n    ClaimRequest[] memory claims,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(claims, _GET_EMPTY_SIGNATURE_REQUEST(), namespace);\\n  }\\n\\n  function buildRequest(\\n    AuthRequest[] memory auths,\\n    bytes16 namespace\\n  ) internal view returns (SismoConnectRequest memory) {\\n    return _requestBuilder.build(auths, _GET_EMPTY_SIGNATURE_REQUEST(), namespace);\\n  }\\n\\n  function _GET_EMPTY_SIGNATURE_REQUEST() internal view returns (SignatureRequest memory) {\\n    return _signatureBuilder.buildEmpty();\\n  }\\n}\\n\",\"keccak256\":\"0xc671ca816484597920af440b730e900995801a2d63fc6ad33dd60071195e044b\",\"license\":\"MIT\"},\"@sismo-core/sismo-connect-solidity/contracts/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IAddressesProvider {\\n  /**\\n   * @dev Sets the address of a contract.\\n   * @param contractAddress Address of the contract.\\n   * @param contractName Name of the contract.\\n   */\\n  function set(address contractAddress, string memory contractName) external;\\n\\n  /**\\n   * @dev Sets the address of multiple contracts.\\n   * @param contractAddresses Addresses of the contracts.\\n   * @param contractNames Names of the contracts.\\n   */\\n  function setBatch(address[] calldata contractAddresses, string[] calldata contractNames) external;\\n\\n  /**\\n   * @dev Returns the address of a contract.\\n   * @param contractName Name of the contract (string).\\n   * @return Address of the contract.\\n   */\\n  function get(string memory contractName) external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of a contract.\\n   * @param contractNameHash Hash of the name of the contract (bytes32).\\n   * @return Address of the contract.\\n   */\\n  function get(bytes32 contractNameHash) external view returns (address);\\n\\n  /**\\n   * @dev Returns the addresses of all contracts inputed.\\n   * @param contractNames Names of the contracts as strings.\\n   */\\n  function getBatch(string[] calldata contractNames) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the addresses of all contracts inputed.\\n   * @param contractNamesHash Names of the contracts as strings.\\n   */\\n  function getBatch(bytes32[] calldata contractNamesHash) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the addresses of all contracts in `_contractNames`\\n   * @return Names, Hashed Names and Addresses of all contracts.\\n   */\\n  function getAll() external view returns (string[] memory, bytes32[] memory, address[] memory);\\n}\\n\",\"keccak256\":\"0x7088a8721bb95c4d2ae77db038542e3afccfdb5772a9f6af500098f34514369e\",\"license\":\"MIT\"},\"@sismo-core/sismo-connect-solidity/contracts/interfaces/ISismoConnectVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/Structs.sol\\\";\\n\\ninterface ISismoConnectVerifier {\\n  event VerifierSet(bytes32, address);\\n\\n  error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\\n  error NamespaceMismatch(bytes16 receivedNamespace, bytes16 expectedNamespace);\\n  error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\\n  error SignatureMessageMismatch(bytes requestMessageSignature, bytes responseMessageSignature);\\n\\n  function verify(\\n    SismoConnectResponse memory response,\\n    SismoConnectRequest memory request,\\n    SismoConnectConfig memory config\\n  ) external view returns (SismoConnectVerifiedResult memory);\\n\\n  function SISMO_CONNECT_VERSION() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x617bcbf770d9e9dcc3d39489e608031906991243cdfe1f5cee48e734225c46df\",\"license\":\"MIT\"},\"@sismo-core/sismo-connect-solidity/contracts/utils/AuthRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract AuthRequestBuilder {\\n  // default values for Auth Request\\n  bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\\n  uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\\n  bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\\n  bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n  error InvalidUserIdAndIsSelectableByUserAuthType();\\n  error InvalidUserIdAndAuthType();\\n\\n  function build(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId,\\n    bool isOptional,\\n    bool isSelectableByUser,\\n    bytes memory extraData\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: userId,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId,\\n    bytes memory extraData\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: userId,\\n        isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(AuthType authType) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n        userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n        isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(AuthType authType, bool isAnon) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n        isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(AuthType authType, uint256 userId) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n        userId: userId,\\n        isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    AuthType authType,\\n    bytes memory extraData\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n        userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n        isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: userId,\\n        isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    AuthType authType,\\n    bool isAnon,\\n    bytes memory extraData\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n        isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    AuthType authType,\\n    uint256 userId,\\n    bytes memory extraData\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n        userId: userId,\\n        isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n        extraData: extraData\\n      });\\n  }\\n\\n  // allow dev to choose for isOptional\\n  // the user is ask to choose isSelectableByUser to avoid the function signature collision\\n  // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\\n\\n  function build(\\n    AuthType authType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n        userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    AuthType authType,\\n    bool isOptional,\\n    bool isSelectableByUser,\\n    uint256 userId\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n        userId: userId,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  // the user is ask to choose isSelectableByUser to avoid the function signature collision\\n  // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\\n\\n  function build(\\n    AuthType authType,\\n    bool isAnon,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    AuthType authType,\\n    uint256 userId,\\n    bool isOptional\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n        userId: userId,\\n        isOptional: isOptional,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId,\\n    bool isOptional\\n  ) external pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: userId,\\n        isOptional: isOptional,\\n        extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function _build(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId,\\n    bool isOptional,\\n    bytes memory extraData\\n  ) internal pure returns (AuthRequest memory) {\\n    return\\n      _build({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: userId,\\n        isOptional: isOptional,\\n        isSelectableByUser: _authIsSelectableDefaultValue(authType, userId),\\n        extraData: extraData\\n      });\\n  }\\n\\n  function _build(\\n    AuthType authType,\\n    bool isAnon,\\n    uint256 userId,\\n    bool isOptional,\\n    bool isSelectableByUser,\\n    bytes memory extraData\\n  ) internal pure returns (AuthRequest memory) {\\n    // When `userId` is 0, it means the app does not require a specific auth account and the user needs\\n    // to choose the account they want to use for the app.\\n    // When `isSelectableByUser` is true, the user can select the account they want to use.\\n    // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\\n    // If this combination is detected, the function will revert with an error.\\n    if (authType != AuthType.VAULT && userId == 0 && isSelectableByUser == false) {\\n      revert InvalidUserIdAndIsSelectableByUserAuthType();\\n    }\\n    // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\\n    if (authType == AuthType.VAULT && userId != 0 && isSelectableByUser == false) {\\n      revert InvalidUserIdAndAuthType();\\n    }\\n    return\\n      AuthRequest({\\n        authType: authType,\\n        isAnon: isAnon,\\n        userId: userId,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function _authIsSelectableDefaultValue(\\n    AuthType authType,\\n    uint256 requestedUserId\\n  ) internal pure returns (bool) {\\n    // isSelectableByUser value should always be false in case of VAULT authType.\\n    // This is because the user can't select the account they want to use for the app.\\n    // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\\n    if (authType == AuthType.VAULT) {\\n      return false;\\n    }\\n    // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\\n    // so we want the default value for `isSelectableByUser` to be `true`.\\n    if (requestedUserId == 0) {\\n      return true;\\n    }\\n    // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\\n    // so we want the default value for `isSelectableByUser` to be `false`.\\n    else {\\n      return false;\\n    }\\n    // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\\n  }\\n}\\n\",\"keccak256\":\"0xbdda4b5b5409ac0c27f2400f51862a9571522c5d7e208026a18999485c5f014b\",\"license\":\"MIT\"},\"@sismo-core/sismo-connect-solidity/contracts/utils/ClaimRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract ClaimRequestBuilder {\\n  // default value for Claim Request\\n  bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP = bytes16(\\\"latest\\\");\\n  uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\\n  ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\\n  bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\\n  bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\\n  bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        claimType: claimType,\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: value,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    ClaimType claimType,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        claimType: claimType,\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: value,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(bytes16 groupId) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(bytes16 groupId, uint256 value) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: value,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(bytes16 groupId, ClaimType claimType) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: claimType,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: value,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    ClaimType claimType\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: claimType,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    uint256 value,\\n    ClaimType claimType\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: value,\\n        claimType: claimType,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    uint256 value,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: value,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    ClaimType claimType,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: claimType,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    ClaimType claimType\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: value,\\n        claimType: claimType,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: value,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    ClaimType claimType,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: claimType,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    uint256 value,\\n    ClaimType claimType,\\n    bytes memory extraData\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: value,\\n        claimType: claimType,\\n        isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n        isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  // allow dev to choose for isOptional\\n  // we force to also set isSelectableByUser\\n  // otherwise function signatures would be colliding\\n  // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\\n  // we keep this logic for all function signature combinations\\n\\n  function build(\\n    bytes16 groupId,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    uint256 value,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: value,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: claimType,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: value,\\n        claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: DEFAULT_CLAIM_REQUEST_VALUE,\\n        claimType: claimType,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    uint256 value,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n        value: value,\\n        claimType: claimType,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes16 groupId,\\n    bytes16 groupTimestamp,\\n    uint256 value,\\n    ClaimType claimType,\\n    bool isOptional,\\n    bool isSelectableByUser\\n  ) external pure returns (ClaimRequest memory) {\\n    return\\n      ClaimRequest({\\n        groupId: groupId,\\n        groupTimestamp: groupTimestamp,\\n        value: value,\\n        claimType: claimType,\\n        isOptional: isOptional,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0x7b4109877f1339b0d98201b4c850a25d78ffe238e255eaec1b07a1064c8d8742\",\"license\":\"MIT\"},\"@sismo-core/sismo-connect-solidity/contracts/utils/RequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\nimport {SignatureBuilder} from \\\"./SignatureBuilder.sol\\\";\\n\\ncontract RequestBuilder {\\n  // default value for namespace\\n  bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\\\"main\\\"));\\n  // default value for a signature request\\n  SignatureRequest DEFAULT_SIGNATURE_REQUEST =\\n    SignatureRequest({\\n      message: \\\"MESSAGE_SELECTED_BY_USER\\\",\\n      isSelectableByUser: false,\\n      extraData: \\\"\\\"\\n    });\\n\\n  function build(\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) external pure returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](1);\\n    auths[0] = auth;\\n    ClaimRequest[] memory claims = new ClaimRequest[](1);\\n    claims[0] = claim;\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    bytes16 namespace\\n  ) external view returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](1);\\n    auths[0] = auth;\\n    ClaimRequest[] memory claims = new ClaimRequest[](1);\\n    claims[0] = claim;\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) external pure returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](0);\\n    ClaimRequest[] memory claims = new ClaimRequest[](1);\\n    claims[0] = claim;\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(\\n    ClaimRequest memory claim,\\n    bytes16 namespace\\n  ) external view returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](0);\\n    ClaimRequest[] memory claims = new ClaimRequest[](1);\\n    claims[0] = claim;\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest memory auth,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) external pure returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](1);\\n    auths[0] = auth;\\n    ClaimRequest[] memory claims = new ClaimRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest memory auth,\\n    bytes16 namespace\\n  ) external view returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](1);\\n    auths[0] = auth;\\n    ClaimRequest[] memory claims = new ClaimRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature\\n  ) external pure returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](1);\\n    auths[0] = auth;\\n    ClaimRequest[] memory claims = new ClaimRequest[](1);\\n    claims[0] = claim;\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest memory auth,\\n    ClaimRequest memory claim\\n  ) external view returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](1);\\n    auths[0] = auth;\\n    ClaimRequest[] memory claims = new ClaimRequest[](1);\\n    claims[0] = claim;\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest memory auth,\\n    SignatureRequest memory signature\\n  ) external pure returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](1);\\n    auths[0] = auth;\\n    ClaimRequest[] memory claims = new ClaimRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(AuthRequest memory auth) external view returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](1);\\n    auths[0] = auth;\\n    ClaimRequest[] memory claims = new ClaimRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    ClaimRequest memory claim,\\n    SignatureRequest memory signature\\n  ) external pure returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](0);\\n    ClaimRequest[] memory claims = new ClaimRequest[](1);\\n    claims[0] = claim;\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(ClaimRequest memory claim) external view returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](0);\\n    ClaimRequest[] memory claims = new ClaimRequest[](1);\\n    claims[0] = claim;\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  // build with arrays for auths and claims\\n  function build(\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) external pure returns (SismoConnectRequest memory) {\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    bytes16 namespace\\n  ) external view returns (SismoConnectRequest memory) {\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) external pure returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(\\n    ClaimRequest[] memory claims,\\n    bytes16 namespace\\n  ) external view returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest[] memory auths,\\n    SignatureRequest memory signature,\\n    bytes16 namespace\\n  ) external pure returns (SismoConnectRequest memory) {\\n    ClaimRequest[] memory claims = new ClaimRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest[] memory auths,\\n    bytes16 namespace\\n  ) external view returns (SismoConnectRequest memory) {\\n    ClaimRequest[] memory claims = new ClaimRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: namespace,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature\\n  ) external pure returns (SismoConnectRequest memory) {\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest[] memory auths,\\n    ClaimRequest[] memory claims\\n  ) external view returns (SismoConnectRequest memory) {\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    AuthRequest[] memory auths,\\n    SignatureRequest memory signature\\n  ) external pure returns (SismoConnectRequest memory) {\\n    ClaimRequest[] memory claims = new ClaimRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(AuthRequest[] memory auths) external view returns (SismoConnectRequest memory) {\\n    ClaimRequest[] memory claims = new ClaimRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n\\n  function build(\\n    ClaimRequest[] memory claims,\\n    SignatureRequest memory signature\\n  ) external pure returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: signature\\n      })\\n    );\\n  }\\n\\n  function build(ClaimRequest[] memory claims) external view returns (SismoConnectRequest memory) {\\n    AuthRequest[] memory auths = new AuthRequest[](0);\\n    return (\\n      SismoConnectRequest({\\n        namespace: DEFAULT_NAMESPACE,\\n        auths: auths,\\n        claims: claims,\\n        signature: DEFAULT_SIGNATURE_REQUEST\\n      })\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x19fc14558d3512750b4d4d92238df61f66ab0687bef02468565c3e98fe969ac4\",\"license\":\"MIT\"},\"@sismo-core/sismo-connect-solidity/contracts/utils/SignatureBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract SignatureBuilder {\\n  // default values for Signature Request\\n  bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE = \\\"MESSAGE_SELECTED_BY_USER\\\";\\n  bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER = false;\\n  bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n  function build(bytes memory message) external pure returns (SignatureRequest memory) {\\n    return\\n      SignatureRequest({\\n        message: message,\\n        isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes memory message,\\n    bool isSelectableByUser\\n  ) external pure returns (SignatureRequest memory) {\\n    return\\n      SignatureRequest({\\n        message: message,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bytes memory message,\\n    bytes memory extraData\\n  ) external pure returns (SignatureRequest memory) {\\n    return\\n      SignatureRequest({\\n        message: message,\\n        isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(\\n    bytes memory message,\\n    bool isSelectableByUser,\\n    bytes memory extraData\\n  ) external pure returns (SignatureRequest memory) {\\n    return\\n      SignatureRequest({\\n        message: message,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function build(bool isSelectableByUser) external pure returns (SignatureRequest memory) {\\n    return\\n      SignatureRequest({\\n        message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n      });\\n  }\\n\\n  function build(\\n    bool isSelectableByUser,\\n    bytes memory extraData\\n  ) external pure returns (SignatureRequest memory) {\\n    return\\n      SignatureRequest({\\n        message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n        isSelectableByUser: isSelectableByUser,\\n        extraData: extraData\\n      });\\n  }\\n\\n  function buildEmpty() external pure returns (SignatureRequest memory) {\\n    return\\n      SignatureRequest({\\n        message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n        isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n        extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0x5d071367c63510c3e38d4fe73b81ec2b7eda1c442fe3e8c75fcbab0d929524dc\",\"license\":\"MIT\"},\"@sismo-core/sismo-connect-solidity/contracts/utils/SismoConnectHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary SismoConnectHelper {\\n  error AuthTypeNotFoundInVerifiedResult(AuthType authType);\\n\\n  function getUserId(\\n    SismoConnectVerifiedResult memory result,\\n    AuthType authType\\n  ) internal pure returns (uint256) {\\n    // get the first userId that matches the authType\\n    for (uint256 i = 0; i < result.auths.length; i++) {\\n      if (result.auths[i].authType == authType) {\\n        return result.auths[i].userId;\\n      }\\n    }\\n    revert AuthTypeNotFoundInVerifiedResult(authType);\\n  }\\n\\n  function getUserIds(\\n    SismoConnectVerifiedResult memory result,\\n    AuthType authType\\n  ) internal pure returns (uint256[] memory) {\\n    // get all userIds that match the authType\\n    uint256[] memory userIds = new uint256[](result.auths.length);\\n    for (uint256 i = 0; i < result.auths.length; i++) {\\n      if (result.auths[i].authType == authType) {\\n        userIds[i] = result.auths[i].userId;\\n      }\\n    }\\n    return userIds;\\n  }\\n\\n  function getSignedMessage(\\n    SismoConnectVerifiedResult memory result\\n  ) internal pure returns (bytes memory) {\\n    return result.signedMessage;\\n  }\\n}\\n\",\"keccak256\":\"0xa3affedc6093d4b9a5796ee1ac1a6bc552991f19ca319a76ef5f8f522f730346\",\"license\":\"MIT\"},\"@sismo-core/sismo-connect-solidity/contracts/utils/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nstruct SismoConnectRequest {\\n  bytes16 namespace;\\n  AuthRequest[] auths;\\n  ClaimRequest[] claims;\\n  SignatureRequest signature;\\n}\\n\\nstruct SismoConnectConfig {\\n  bytes16 appId;\\n  VaultConfig vault;\\n}\\n\\nstruct VaultConfig {\\n  bool isImpersonationMode;\\n}\\n\\nstruct AuthRequest {\\n  AuthType authType;\\n  uint256 userId; // default: 0\\n  // flags\\n  bool isAnon; // default: false -> true not supported yet, need to throw if true\\n  bool isOptional; // default: false\\n  bool isSelectableByUser; // default: true\\n  //\\n  bytes extraData; // default: \\\"\\\"\\n}\\n\\nstruct ClaimRequest {\\n  ClaimType claimType; // default: GTE\\n  bytes16 groupId;\\n  bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\n  uint256 value; // default: 1\\n  // flags\\n  bool isOptional; // default: false\\n  bool isSelectableByUser; // default: true\\n  //\\n  bytes extraData; // default: \\\"\\\"\\n}\\n\\nstruct SignatureRequest {\\n  bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\n  bool isSelectableByUser; // default: false\\n  bytes extraData; // default: \\\"\\\"\\n}\\n\\nenum AuthType {\\n  VAULT,\\n  GITHUB,\\n  TWITTER,\\n  EVM_ACCOUNT,\\n  TELEGRAM,\\n  DISCORD\\n}\\n\\nenum ClaimType {\\n  GTE,\\n  GT,\\n  EQ,\\n  LT,\\n  LTE\\n}\\n\\nstruct Auth {\\n  AuthType authType;\\n  bool isAnon;\\n  bool isSelectableByUser;\\n  uint256 userId;\\n  bytes extraData;\\n}\\n\\nstruct Claim {\\n  ClaimType claimType;\\n  bytes16 groupId;\\n  bytes16 groupTimestamp;\\n  bool isSelectableByUser;\\n  uint256 value;\\n  bytes extraData;\\n}\\n\\nstruct Signature {\\n  bytes message;\\n  bytes extraData;\\n}\\n\\nstruct SismoConnectResponse {\\n  bytes16 appId;\\n  bytes16 namespace;\\n  bytes32 version;\\n  bytes signedMessage;\\n  SismoConnectProof[] proofs;\\n}\\n\\nstruct SismoConnectProof {\\n  Auth[] auths;\\n  Claim[] claims;\\n  bytes32 provingScheme;\\n  bytes proofData;\\n  bytes extraData;\\n}\\n\\nstruct SismoConnectVerifiedResult {\\n  bytes16 appId;\\n  bytes16 namespace;\\n  bytes32 version;\\n  VerifiedAuth[] auths;\\n  VerifiedClaim[] claims;\\n  bytes signedMessage;\\n}\\n\\nstruct VerifiedAuth {\\n  AuthType authType;\\n  bool isAnon;\\n  uint256 userId;\\n  bytes extraData;\\n  bytes proofData;\\n}\\n\\nstruct VerifiedClaim {\\n  ClaimType claimType;\\n  bytes16 groupId;\\n  bytes16 groupTimestamp;\\n  uint256 value;\\n  bytes extraData;\\n  uint256 proofId;\\n  bytes proofData;\\n}\\n\",\"keccak256\":\"0x978c56d685ed88ce85590f7f7acec107e34f5ef6b4cf9f4dcfc2be5b5d3e97d8\",\"license\":\"MIT\"},\"contracts/Base.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nimport {ISafeProtocolPlugin} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Integrations.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nenum MetadataProviderType {\\n    IPFS,\\n    URL,\\n    Contract,\\n    Event\\n}\\n\\ninterface IMetadataProvider {\\n    function retrieveMetadata(bytes32 metadataHash) external view returns (bytes memory metadata);\\n}\\n\\nstruct PluginMetadata {\\n    string name;\\n    string version;\\n    bool requiresRootAccess;\\n    string iconUrl;\\n    string appUrl;\\n}\\n\\nlibrary PluginMetadataOps {\\n    function encode(PluginMetadata memory data) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                uint8(0x00), // Format\\n                uint8(0x00), // Format version\\n                abi.encode(data.name, data.version, data.requiresRootAccess, data.iconUrl, data.appUrl) // Plugin Metadata\\n            );\\n    }\\n\\n    function decode(bytes calldata data) internal pure returns (PluginMetadata memory) {\\n        require(bytes16(data[0:2]) == bytes16(0x0000), \\\"Unsupported format or format version\\\");\\n        (string memory name, string memory version, bool requiresRootAccess, string memory iconUrl, string memory appUrl) = abi.decode(\\n            data[2:],\\n            (string, string, bool, string, string)\\n        );\\n        return PluginMetadata(name, version, requiresRootAccess, iconUrl, appUrl);\\n    }\\n}\\n\\nabstract contract BasePlugin is ISafeProtocolPlugin {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    string public name;\\n    string public version;\\n    bool public immutable requiresRootAccess;\\n    bytes32 public immutable metadataHash;\\n\\n    constructor(PluginMetadata memory metadata) {\\n        name = metadata.name;\\n        version = metadata.version;\\n        requiresRootAccess = metadata.requiresRootAccess;\\n        metadataHash = keccak256(metadata.encode());\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return interfaceId == type(ISafeProtocolPlugin).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\nabstract contract BasePluginWithStoredMetadata is BasePlugin, IMetadataProvider {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    bytes private encodedMetadata;\\n\\n    constructor(PluginMetadata memory metadata) BasePlugin(metadata) {\\n        encodedMetadata = metadata.encode();\\n    }\\n\\n    function retrieveMetadata(bytes32 _metadataHash) external view override returns (bytes memory metadata) {\\n        require(metadataHash == _metadataHash, \\\"Cannot retrieve metadata\\\");\\n        return encodedMetadata;\\n    }\\n\\n    function metadataProvider() public view override returns (uint256 providerType, bytes memory location) {\\n        providerType = uint256(MetadataProviderType.Contract);\\n        location = abi.encode(address(this));\\n    }\\n}\\n\\nabstract contract BasePluginWithEventMetadata is BasePlugin {\\n    using PluginMetadataOps for PluginMetadata;\\n\\n    event Metadata(bytes32 indexed metadataHash, bytes data);\\n\\n    constructor(PluginMetadata memory metadata) BasePlugin(metadata) {\\n        emit Metadata(metadataHash, metadata.encode());\\n    }\\n\\n    function metadataProvider() public view override returns (uint256 providerType, bytes memory location) {\\n        providerType = uint256(MetadataProviderType.Event);\\n        location = abi.encode(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xe9f79915c4cad92408f25dbbd832e19d1eee02f01c4ea847b018f30aa5e927ae\",\"license\":\"LGPL-3.0-only\"},\"contracts/SafePaymasterPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {BasePluginWithEventMetadata, PluginMetadata} from \\\"./Base.sol\\\";\\nimport {ISafe} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Accounts.sol\\\";\\nimport {ISafeProtocolManager} from \\\"@safe-global/safe-core-protocol/contracts/interfaces/Manager.sol\\\";\\nimport {SafeTransaction, SafeProtocolAction} from \\\"@safe-global/safe-core-protocol/contracts/DataTypes.sol\\\";\\n\\nimport { GelatoRelayContextERC2771 } from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\\\";\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {\\n    SismoConnect, \\n    SismoConnectHelper, \\n    SismoConnectVerifiedResult, \\n    ClaimRequest, \\n    AuthRequest, \\n    AuthType\\n} from \\\"@sismo-core/sismo-connect-solidity/contracts/SismoConnectLib.sol\\\";\\n\\nimport { Indexer } from \\\"./interfaces/Indexer.sol\\\";\\n\\ncontract SafePaymasterPlugin is BasePluginWithEventMetadata, SismoConnect, GelatoRelayContextERC2771  {\\n\\n    Indexer indexer;\\n\\n    error FeePaymentFailure(bytes data);\\n    error UntrustedOrigin(address origin);\\n    error RelayExecutionFailure(bytes data);\\n    error InvalidRelayMethod(bytes4 data);\\n    error InvalidRelayTarget();\\n    error NotSafePaymaster();\\n    error OneTransactionEachTime();\\n    error invalidZKProof();\\n    \\n    address constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    using SismoConnectHelper for SismoConnectVerifiedResult;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct GuardInfo{\\n        ClaimRequest[] claims;\\n        EnumerableSet.Bytes32Set contractAllowedMethods;\\n        mapping(bytes32 => uint256) timesPerAddress;\\n        uint256 allowedTimesPerAddress;\\n    }\\n\\n    mapping(address => EnumerableSet.AddressSet) safeWhitelistedContracts;\\n\\n    mapping(bytes32 => GuardInfo) safeGuard;\\n\\n    constructor(\\n        Indexer _indexer,\\n        bytes16 appId\\n    )   GelatoRelayContextERC2771()\\n        SismoConnect(buildConfig(appId))\\n        BasePluginWithEventMetadata(\\n            PluginMetadata({\\n                name: \\\"Test Plugin\\\",\\n                version: \\\"1.0.0\\\",\\n                requiresRootAccess: false,\\n                iconUrl: \\\"\\\",\\n                appUrl: string.concat(\\\"https://nijoe1.github.io/Safe.Paymaster/#/zkSafePaymaster/\\\",Strings.toHexString(address(this)))\\n            })\\n        )\\n    {\\n        indexer = _indexer;\\n    }\\n\\n    function setAllowedInteractions(\\n        address safeAddress,\\n        address contractAddress,\\n        bytes4[] calldata  methods,\\n        ClaimRequest[] calldata _claims,\\n        uint256 _timesPerAddress,\\n        string memory guardMetadataCID  \\n    )external{\\n        // To secure the Safe Multisig Wallet\\n        // if(safeAddress != msg.sender && safeAddress != _getMsgSender()) revert NotSafePaymaster();\\n\\n        if(safeWhitelistedContracts[safeAddress].length() == 0){\\n            indexer.AddPaymaster(safeAddress, guardMetadataCID);\\n        }else{\\n            indexer.UpdatePaymaster(safeAddress, guardMetadataCID);\\n        }\\n\\n        safeWhitelistedContracts[safeAddress].add(contractAddress);\\n\\n        bytes32 uid = keccak256(abi.encode(safeAddress,contractAddress));\\n\\n        GuardInfo storage SafeGuard = safeGuard[uid];\\n\\n        // Adding the allowed methods\\n        for (uint i = 0; i < methods.length; ) {\\n            SafeGuard.contractAllowedMethods.add(methods[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // Adding the required ZK proofs to allow sponsoring the transaction\\n        for (uint j = 0; j < _claims.length; ) {\\n            SafeGuard.claims.push(_claims[j]);\\n            unchecked {\\n                ++j;\\n            }\\n        }\\n        SafeGuard.allowedTimesPerAddress = _timesPerAddress;\\n    }\\n\\n    function deleteAllowedInteractions(\\n        address safeAddress,\\n        address contractAddress,\\n        bytes4[] calldata  methods,\\n        string memory guardMetadataCID  \\n    )external{\\n        // To secure the Safe Multisig Wallet\\n        if(safeAddress != msg.sender) revert NotSafePaymaster();\\n\\n        indexer.UpdatePaymaster(safeAddress, guardMetadataCID);\\n\\n        if(!safeWhitelistedContracts[safeAddress].contains(contractAddress)) revert();\\n\\n        bytes32 uid = keccak256(abi.encode(safeAddress,contractAddress));\\n\\n        GuardInfo storage SafeGuard = safeGuard[uid];\\n\\n        // Adding the allowed methods\\n        for (uint i = 0; i < methods.length; ) {\\n            SafeGuard.contractAllowedMethods.remove(methods[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function executeFromPlugin(\\n        address manager, \\n        address safe,\\n        SafeTransaction calldata safetx,\\n        bytes memory proofs\\n    ) external onlyGelatoRelayERC2771{\\n        // if (trustedOrigin != address(0) && msg.sender != trustedOrigin) revert UntrustedOrigin(msg.sender);\\n        // We use the hash of the tx to relay has a nonce as this is unique\\n        uint256 nonce = uint256(keccak256(abi.encode(_getMsgSender(), manager, safe, safetx.actions[0].data)));\\n\\n        relayCall(manager, safe, safetx, proofs);\\n\\n        payFee(manager, safe, nonce);\\n    }\\n\\n    function relayCall(\\n        address manager,\\n        address safe, \\n        SafeTransaction calldata  safetx,\\n        bytes memory proofs\\n    ) internal {\\n\\n        uint size = safetx.actions.length;\\n        \\n        if(size > 1 ){\\n            revert OneTransactionEachTime();\\n        }\\n\\n        SafeProtocolAction memory _action = safetx.actions[0];\\n            \\n        bytes32 relayData = bytes4(safetx.actions[0].data[:4]);\\n\\n        bool allowedContract = safeWhitelistedContracts[address(safe)].contains(_action.to);\\n\\n        if(!allowedContract) revert InvalidRelayTarget();\\n\\n        bytes32 uid = keccak256(abi.encode(address(safe), _action.to));\\n            \\n        GuardInfo storage SafeGuard = safeGuard[uid]; \\n            \\n        if(SafeGuard.contractAllowedMethods.contains(relayData)) revert InvalidRelayMethod(bytes4(relayData));\\n           \\n        if (SafeGuard.claims.length > 0) {\\n            // Verifying Claims\\n            verifySismoClaims(proofs, _getMsgSender(), SafeGuard.claims);\\n        }\\n            \\n        SafeGuard.allowedTimesPerAddress;\\n            \\n        uid = keccak256(abi.encode(relayData,_action.to));\\n            \\n        require(SafeGuard.allowedTimesPerAddress > SafeGuard.timesPerAddress[uid]);\\n        \\n        SafeGuard.timesPerAddress[uid]++;\\n        \\n        // Perform relay call and require success to avoid that user paid for failed transaction\\n        try ISafeProtocolManager(manager).executeTransaction(ISafe(safe), safetx) returns (bytes[] memory) {} catch (bytes memory reason) {\\n            revert RelayExecutionFailure(reason);\\n        }\\n    }\\n\\n    function verifySismoClaims(\\n        bytes memory sismoConnectResponseProofs,\\n        address relayFor,\\n        ClaimRequest[] memory requestRequiredClaims\\n    ) public view{\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = buildAuth({authType: AuthType.VAULT});\\n\\n        SismoConnectVerifiedResult memory result = verify({\\n            responseBytes: sismoConnectResponseProofs,\\n            auths: auths,\\n            claims: requestRequiredClaims,\\n            signature: buildSignature({message: abi.encode(relayFor)})\\n        });\\n\\n        if(result.claims.length == requestRequiredClaims.length) revert invalidZKProof();\\n    }\\n\\n    function payFee(address manager, address safe, uint256 nonce) internal {        \\n\\n        SafeTransaction memory safeTx = getFeesTransferTxData(_getFeeToken(),_getFeeCollector(),_getFee(),nonce);\\n        try ISafeProtocolManager(manager).executeTransaction(ISafe(safe), safeTx) returns (bytes[] memory) {} catch (bytes memory reason) {\\n            revert FeePaymentFailure(reason);\\n        }\\n    }\\n\\n    function getFeesTransferTxData(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _nonce\\n    ) internal pure returns(SafeTransaction memory transaction) {\\n        SafeProtocolAction[] memory actions = new SafeProtocolAction[](1);\\n\\n        if (_token == NATIVE_TOKEN || _token == address(0)) {\\n            // If the native token is used for fee payment, then we directly send the fees to the fee collector\\n            actions[0].to = payable(_to);\\n            actions[0].value = _amount;\\n            actions[0].data = \\\"\\\";\\n        } else {\\n            // If a ERC20 token is used for fee payment, then we trigger a token transfer on the token for the fee to the fee collector\\n            actions[0].to = payable(_token);\\n            actions[0].value = 0;\\n            actions[0].data = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _amount);\\n        }\\n        return SafeTransaction({actions: actions, nonce: _nonce, metadataHash: bytes32(0)});\\n    }\\n}\\n\",\"keccak256\":\"0x1f1f6985dc820e11b7dad634b0250f20acae870140a1a018ddd737925f647a42\",\"license\":\"MIT\"},\"contracts/interfaces/Indexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface Indexer {\\n\\n    function AddPaymaster(\\n        address safeAddress,\\n        string memory safeMetadata\\n    ) external;\\n\\n    function UpdatePaymaster(\\n        address safeAddress,\\n        string memory safeMetadata\\n    ) external;\\n}\",\"keccak256\":\"0x1d59f32a089e5079bce2a03f74f2a9a482572dcae11df4a0bc4471aeb0af0350\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "metadataProvider()": {
        "returns": {
          "location": "bytes",
          "providerType": "uint256 Type of metadata provider"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "metadataProvider()": {
        "notice": "A function that returns information about the type of metadata provider and its location.         For more information on metadata provider, refer to https://github.com/safe-global/safe-core-protocol-specs/."
      },
      "name()": {
        "notice": "A funtion that returns name of the plugin"
      },
      "requiresRootAccess()": {
        "notice": "A function that indicates if the plugin requires root access to a Safe."
      },
      "version()": {
        "notice": "A function that returns version of the plugin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9663,
        "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 9665,
        "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 9888,
        "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
        "label": "indexer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Indexer)10817"
      },
      {
        "astId": 9946,
        "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
        "label": "safeWhitelistedContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(AddressSet)2991_storage)"
      },
      {
        "astId": 9951,
        "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
        "label": "safeGuard",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(GuardInfo)9941_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ClaimRequest)8766_storage)dyn_storage": {
        "base": "t_struct(ClaimRequest)8766_storage",
        "encoding": "dynamic_array",
        "label": "struct ClaimRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(Indexer)10817": {
        "encoding": "inplace",
        "label": "contract Indexer",
        "numberOfBytes": "20"
      },
      "t_enum(ClaimType)8786": {
        "encoding": "inplace",
        "label": "enum ClaimType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(AddressSet)2991_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2991_storage"
      },
      "t_mapping(t_bytes32,t_struct(GuardInfo)9941_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SafePaymasterPlugin.GuardInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GuardInfo)9941_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2991_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2990,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2676_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)2870_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2869,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2676_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimRequest)8766_storage": {
        "encoding": "inplace",
        "label": "struct ClaimRequest",
        "members": [
          {
            "astId": 8753,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "claimType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ClaimType)8786"
          },
          {
            "astId": 8755,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "groupId",
            "offset": 1,
            "slot": "0",
            "type": "t_bytes16"
          },
          {
            "astId": 8757,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "groupTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 8759,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8761,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "isOptional",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8763,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "isSelectableByUser",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8765,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "extraData",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(GuardInfo)9941_storage": {
        "encoding": "inplace",
        "label": "struct SafePaymasterPlugin.GuardInfo",
        "members": [
          {
            "astId": 9931,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "claims",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(ClaimRequest)8766_storage)dyn_storage"
          },
          {
            "astId": 9934,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "contractAllowedMethods",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Bytes32Set)2870_storage"
          },
          {
            "astId": 9938,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "timesPerAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 9940,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "allowedTimesPerAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)2676_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2671,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2675,
            "contract": "contracts/SafePaymasterPlugin.sol:SafePaymasterPlugin",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}